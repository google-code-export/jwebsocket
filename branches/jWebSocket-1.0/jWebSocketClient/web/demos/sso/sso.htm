<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="chrome=1">
        <!-- If Google's chrome frame installed, use it! -->
        <!-- Comment needs to be BELOW this meta tag! -->
        <!--
        //	****************************************************************************
        //	jWebSocket SSO Demo (Community Edition, CE)
        //	****************************************************************************
        //	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
        //  Alexander Schulze, Germany (NRW)
        //
        //	Licensed under the Apache License, Version 2.0 (the "License");
        //	you may not use this file except in compliance with the License.
        //	You may obtain a copy of the License at
        //
        //	http://www.apache.org/licenses/LICENSE-2.0
        //
        //	Unless required by applicable law or agreed to in writing, software
        //	distributed under the License is distributed on an "AS IS" BASIS,
        //	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        //	See the License for the specific language governing permissions and
        //	limitations under the License.
        //	****************************************************************************
        -->
        <meta http-equiv="Content-Language" content="en">
        <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
        <title>jWebSocket SSO Demo</title>
        <link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

        <script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
        <script src="../../res/js/jwsDemoPlugIn.js" type="text/javascript"></script>
        <script src="../../res/js/jwsSSOPlugIn.js" type="text/javascript"></script>

        <script type="text/javascript" language="JavaScript">

			var eUsername, ePassword;								// the elements for username and password

			var OAUTH_DEFAULT_TIMEOUT = 5000;						// the default timeout for request against the OAuth server
			//
			var APP_URL = "https://<host>/sso/index.html";
			var OAUTH_APP_ID = "<ID>";								// the application id
			var OAUTH_APP_SECRET = "<SECRET>";						// the application secret		
			var OAUTH_HOST = "https://<HOST>";						// the OAuth host 
			URL to a SSO enabled web page, which provides the session cookie (session id)
			var SSO_COOKIE_PAGE = "https://<HOST>/getcookie/index.html";
			var SSO_SESSION_COOKIE = "SMSESSION";					// the name of the SSO server's session cookie

			var OAUTH_AUTHSESSION_URL = "/auth/oauth/v2/token";		// the URL to authenticate a user by session id
			var OAUTH_GETUSER_URL = "/use-token";					// the URL to obtain the user data by access token
			var OAUTH_REFRESHTOKEN_URL = "/auth/oauth/v2/token";	// the URL to obtain a new access token by refresh token
			var OAUTH_GETSESSION_URL = "/get-smsession";			// the URL to obtain a session id by user credentials
			var OAUTH_INVALIDATETOKEN_URL = "/delete-token";		// the URL to invalidate an access token

			var mIsStressTest = false;
			var hStressTest = null;
			var mIsStressCounter = 0;
			var mStartTime = 0;

			// obtaining a session id from user credentials
			function getSSOSession() {
				log("Getting session Id from credentials...");
				// pass username and password to obtain SSO session cookie
				lWSC.ssoGetSSOSession(eUsername.value, ePassword.value, {
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					OnTimeout: function (aToken) {
						log("Timeout: " + JSON.stringify(aToken));
					},
					// use this app specific URL
					URL: OAUTH_HOST + OAUTH_GETSESSION_URL
				});
			}

			// authenticating explicitly against the OAuth server using credentials
			function authDirect() {
				log("Calling explicit OAuth authentication using credentials...");
				// authenticate against OAuth/SSO server directly
				lWSC.ssoAuthDirect(eUsername.value, ePassword.value, {
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					OnTimeout: function (aToken) {
						log("Timeout: " + JSON.stringify(aToken));
					}
				});
			}

			// authenticating implicitly against the OAuth server using session id
			function authSession() {
				log("Calling implicit OAuth authentication using session id...");
				// log("document.cookie: " + document.cookie);

				// authenticate against OAuth server using SSO session id
				lWSC.ssoAuthSession(lWSC.ssoGetSessionId(), {
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("<b><font style=\"color:green\">[" + mIsStressCounter + "] AuthSession Success</font></b>: " + JSON.stringify(aToken));
						mIsStressCounter++;
						if (mIsStressTest) {
							hStresstest = setTimeout(authSession(), 10);
						}
					},
					OnFailure: function (aToken) {
						log("<b><font style=\"color:red\">Failure</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					URL: OAUTH_HOST + OAUTH_AUTHSESSION_URL
				});
			}

			// obtaining user from existing access token
			function getUser() {
				// validate an access token and get the user name
				log("Calling 'getUser' using access token...");
				lWSC.ssoGetUser({
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("<b><font style=\"color:green\">[" + mIsStressCounter + "] GetUser Success</font></b>: " + JSON.stringify(aToken));
						mIsStressCounter++;
						if (mIsStressTest) {
							hStresstest = setTimeout(refreshAccessToken(), 1);
						}
					},
					OnFailure: function (aToken) {
						log("<b><font style=\"color:red\">Failure</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					URL: OAUTH_HOST + OAUTH_GETUSER_URL
				});
			}

			// invalidating existing access token
			// after this operation the access token cannot be used anymore
			function invalidateToken() {
				// refreshing an access token after its expiration
				log("Invalidating access token...");
				lWSC.ssoInvalidateAccessToken({
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					OnTimeout: function (aToken) {
						log("Timeout: " + JSON.stringify(aToken));
					},
					URL: OAUTH_HOST + OAUTH_INVALIDATETOKEN_URL
				});
			}

			function resetStressTest() {
				mIsStressTest = false;
				mIsStressCounter = 0;
				if (hStressTest) {
					clearTimeout(hStressTest);
					hStressTest = null;
				}
			}

			function toggleStressTest() {
				mIsStressTest = eStressTest.checked;
				if (!eStressTest.checked) {
					resetStressTest();
				}
			}

			// refreshing access token
			// if not refesh token exists (yet), a re-authentication is required
			function refreshAccessToken() {
				// refreshing an access token after its expiration
				log("Refreshing access token...");
				mStartTime = new Date().getTime();
				lWSC.ssoRefreshAccessToken({
					// timeout: 5000, // timeout in milliseconds, if required different from default
					OnSuccess: function (aToken) {
						log("<b><font style=\"color:green\">[" + mIsStressCounter + "] Refresh Success</font></b> (" + ((new Date().getTime()) - mStartTime) + "ms): " + JSON.stringify(aToken));
						mIsStressCounter++;
						if (mIsStressTest) {
							hStresstest = setTimeout(getUser(), 1);
						}
					},
					OnFailure: function (aToken) {
						log("<b><font style=\"color:red\">Failure</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
						eStressTest.checked = false;
						resetStressTest();
					},
					URL: OAUTH_HOST + OAUTH_REFRESHTOKEN_URL
				});
			}

			// loads the OAuth data from the local OAuth store 
			// (here an application specific cookie in JSON format)
			function loadOAuthData() {
				log("Loading OAuth data...");
				lWSC.ssoLoadOAuthData({
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					}
				});
			}

			// saves the OAuth data to the local OAuth store 
			// (here an application specific cookie in JSON format)
			function saveOAuthData() {
				log("Saving OAuth data...");
				lWSC.ssoSaveOAuthData({
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					}
				});
			}

			// sending a message with access token authentication to a JMS target
			// at the JMS target the user name will be obtained from the access token
			function sendJMSRequest() {
				log("Sending JMS request with access token...");
				lWSC.forwardJSON(
						"JMSService", // target
						"org.jwebsocket.svcep.demo", //	aNS, 
						"sso1", //	aType, 
						{accessToken: lWSC.ssoGetAccessToken()
						}, //	aArgs, 
				//	aJSON payload, 
				"{}",
						{
							OnSuccess: function (aToken) {
								log("Success: " + JSON.stringify(aToken));
							},
							OnFailure: function (aToken) {
								log("Failure: " + JSON.stringify(aToken));
							}
						});
			}

			function getSMCookie() {
				lWSC.ssoGetSMCookie({
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					timeout: 5000
				});
			}
			
			function getAutoAuthSession() {
				lWSC.ssoAutoAuthSession({
				
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
					},
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					timeout: 5000
				});
			}
			
			function getAutoGetUserFromSession() {
				lWSC.ssoAutoGetUserFromSession({
				
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
					},
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					},
					timeout: 5000
				});
			}
			
			function setAutoRefresh() {
				lWSC.ssoSetAutoRefresh(parseInt(eInterval.value), {
				
					OnTimeout: function (aToken) {
						log("<b><font style=\"color:red\">Timeout</font></b>: " + JSON.stringify(aToken));
					},
					OnSuccess: function (aToken) {
						log("Success: " + JSON.stringify(aToken));
					},
					OnFailure: function (aToken) {
						log("Failure: " + JSON.stringify(aToken));
					}
				});
			}
			
			function initPage() {
				eUsername = jws.$("stxfUsername");
				ePassword = jws.$("spwfPassword");
				eStressTest = jws.$("schkStressTest");
				eInterval = jws.$("stxfInterval");

				// turn on logging in debug mode
				jws.console.setActive(true);
				jws.console.setLevel(jws.console.DEBUG);

				lWSC.ssoSetDefaultTimeout(OAUTH_DEFAULT_TIMEOUT);
				lWSC.ssoSetOAuthHost(OAUTH_HOST);
				lWSC.ssoSetOAuthAppId(OAUTH_APP_ID);
				lWSC.ssoSetOAuthAppSecret(OAUTH_APP_SECRET);
				lWSC.ssoSetSessionCookiePage(SSO_COOKIE_PAGE);
				lWSC.ssoSetSessionCookieName(SSO_SESSION_COOKIE);
				lWSC.ssoSetAppURL(APP_URL);
				/*
				 lWSC.ssoSetRefreshTokenInterval(300 * 1000, {// 300 seconds = 5 min
				 OnSuccess: function (aToken) {
				 log("Refresh: Success: " + JSON.stringify(aToken));
				 },
				 OnFailure: function (aToken) {
				 log("Refresh: Failure: " + JSON.stringify(aToken));
				 },
				 OnTimeout: function () {
				 log("Refresh: Timeout!");
				 }
				 });
				 */
			}

			function exitPage() {
				// processExitPage();
			}

        </script>
    </head>

    <body
        onload="initPage();"
        onunload="exitPage();"
        >
        <!-- to obtain the SSO session id via the cookie, here we need to 
                refer to a page which is accessible from an SSO enable host. -->
        <!-- In case you require a proxy setting in the local web server
                In Apache for instance you can use:
                ProxyPass  /getcookie  https://[<subhost>.]<ssohost>.<tld>/getcookie
        <iframe src="https://[<subhost>.]<ssohost>.<tld>/getcookie/index.html#https://[<subhost>.]<yourhost>.<tld>" style="display:block; width:99%; height:100px">
        </iframe>
        -->
        <script type="text/javascript">
			jws.DemoPlugIn.buildDemoPage({
				title: "External Process",
				header: "jWebSocket SSO Test",
				description: "This test shows how to access SSO environments via jWebSocket."
			});
			processInitPage();
        </script>

        <div class="sdivContainer">
            <table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >
                <tr class="strDlg">
                    <td colspan="2" width="">
                        <input class="sbtnDlg" id="sbtnGetSSOSession" type="button" value="Get Cookie" onclick="getSSOSession();"
                               title="Tries to obtain a session cookie from user credentials.">
                        <input class="sbtnDlg" id="sbtnAuthSession" type="button" value="Auth Session" onclick="authSession();"
                               title="Authenticates by using the session cookie (implicit authentication using NTLM, IWA or Kerberos).">
                        <input class="sbtnDlg" id="sbtnAuthDirect" type="button" value="Auth directly" onclick="authDirect();"
                               title="Authenticates directly agaionst OAuth by passing user credentials.">
                        <input class="sbtnDlg" id="sbtnGetUser" type="button" value="Get User" onclick="getUser();"
                               title="Gets the users from the access token, if exists already.">
                        <input class="sbtnDlg" id="sbtnRefreshAccessToken" type="button" value="Refresh" onclick="refreshAccessToken();"
                               title="Refreshes the access token using the refresh token, if exists already.">
                        <input class="sbtnDlg" id="sbtnSaveOAuthData" type="button" value="Save Cookie" onclick="saveOAuthData();"
                               title="Saves the relevant OAuth data in a cookie.">
                        <input class="sbtnDlg" id="sbtnLoadOAuthData" type="button" value="Load Cookie" onclick="loadOAuthData();"
                               title="Loads the relevant OAuth data from a cookie.">
                        <input class="sbtnDlg" id="sbtnInvalidateToken" type="button" value="Invalidate" onclick="invalidateToken();"
                               title="Invalidates the access token.">
                        <input class="sbtnDlg" id="sbtnSendRequest" type="button" value="JMS Request" onclick="sendJMSRequest();"
                               title="Send a request using the access token to the JMS demo server.">
                    </td>
                </tr>
                <tr class="strDlg">
                    <td colspan="2" width="">
						Stresstest: <input class="schkDlg" id="schkStressTest" type="checkbox" value="" onclick="toggleStressTest();"
										   title="Check to start and uncheck to stop the stress test.">
						Auto-Refresh: <input class="schkDlg" id="stxfInterval" type="input" value="5" style="width:30px"
										   title="The refresh interval in seconds."> s
                    </td>
                </tr>
                <tr class="strDlg">
                    <td colspan="2" width="">
						<input class="sbtnDlg" id="sbtnGetURL" type="button" value="JMS Request" onclick="getURL();"
							   title="Tries to get the content of a certain URL.">
						<input class="sbtnDlg" id="sbtnGetSMCookie" type="button" value="Get Cookie" onclick="getSMCookie();"
							   title="Tries to get the SM session cookie...">
						<input class="sbtnDlg" id="sbtnAutoAuthSession" type="button" value="Auto Auth" onclick="getAutoAuthSession();"
							   title="Tries to authenticate the session (get access token) with a single call...">
						<input class="sbtnDlg" id="sbtnAutoGetUserFromSession" type="button" value="Auto User" onclick="getAutoGetUserFromSession();"
							   title="Tries to get the user name with a single call...">
						<input class="sbtnDlg" id="sbtnAutoSetAutoRefresh" type="button" value="Auto Refresh" onclick="setAutoRefresh();"
							   title="Sets the interval for the automatic refresh token process...">
                    </td>
                </tr>
            </table>
        </div>

    </body>
</html>
