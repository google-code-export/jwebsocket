<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" " http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
	
	<!-- ####### STATIC authentication ####### -->
	
	<bean id="staticAuthProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="staticUserDetailsService"/>
		<!-- here we configure MD5 encryption of the passwords --> 
		<!-- Remark the following line to use plain text passwords, NOT RECOMMENDED! --> 
		<!--<property name="passwordEncoder" ref="authPasswordEncoderMD5"/>-->

		<!-- optional if you intent to use EhCache to cache user repository -->
		<!--<property name="userCache" ref="authUserCache"/>-->
	</bean>

	<!-- jWebSocket static user details service. See jWebSocket.xml <rights><roles><users> -->
	<bean id="staticUserDetailsService" class="org.jwebsocket.security.StaticUserDetails"></bean>
	
	<!-- ####### LDAP authentication ####### -->
	
	<!-- http://springinpractice.com/2010/07/06/spring-security-database-schemas-for-mysql/ -->
	<!-- http://www.springsource.com/files/AdvancedSpringSecurity_handout.pdf -->

	<!-- for LDAP see: 
	http://static.springsource.org/spring-security/site/docs/3.0.x/reference/ldap.html -->
	<!-- hints for AD:
	http://www.coderanch.com/t/525031/Spring/Spring-LDAP-Active-Directory-Security
	http://www.opennms.org/wiki/Spring_Security_and_LDAP -->
		
	<!-- this specifies the user to auth against the directory service -->
	<bean id="ldapContext" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="ldap://your.ldap.host:389"/>
		<!-- specifiy bind user credentials here, this is the user which is allowed to access the directory server -->
		<property name="userDn" value="user@domain.tld"/>
		<property name="password" value="your.password"/>
	</bean>
			
	<bean id="ldapUserSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<!-- specify the start node for searches here -->
		<constructor-arg index="0" value="DC=domain,DC=tld" />
		<!-- allow only users belonging to specific groups to get authenticated -->
		<constructor-arg index="1" value="(&amp;(objectclass=user)(sAMAccountName={0}))"/>
		<constructor-arg index="2" ref="ldapContext" />
		<property name="searchSubtree" value="true" />
	</bean>	

	<bean id="ldapAuthenticator" class="org.springframework.security.ldap.authentication.BindAuthenticator">
		<constructor-arg ref="ldapContext"/>
		<property name="userSearch" ref="ldapUserSearch"/>
	</bean>
	
	<!-- http://static.springsource.org/spring-security/site/docs/3.1.x/apidocs/org/springframework/security/ldap/userdetails/DefaultLdapAuthoritiesPopulator.html -->
	<bean id="ldapAuthoritiesPopulator" class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
		<constructor-arg ref="ldapContext"/>
		<!-- the start node to search from -->
		<constructor-arg value="OU=Groups,DC=domain,DC=tld"/>
		<!-- the LDAP attrribute identifying the name of the group -->
		<property name="groupRoleAttribute" value="cn"/>
		<!-- if you like to, here you can add a prefix to the group in the directory service -->
		<property name="rolePrefix" value=""/>
		<!-- here you optionally can add a default role if no roles are found in the directory service -->
		<!-- <property name="defaultRole" value="ROLE_ANOMYMOUS"/> -->
		<property name="convertToUpperCase" value="false"/>
		<!-- here you specifiy whether to search through subtrees of the directory service -->
		<property name="searchSubtree" value="true"/>
		<!-- this is a special spring security setting to ignore issues in MS' Active Directory -->
		<property name="ignorePartialResultException" value="true"/>
	</bean>
	
	<bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<constructor-arg ref="ldapAuthenticator"/>
		<constructor-arg ref="ldapAuthoritiesPopulator"/>
	</bean>
	
	
	<!-- ####### JDBC authentication ####### -->
	<!-- http://static.springsource.org/spring-security/site/docs/3.0.x/reference/core-services.html -->
	<!-- http://grepcode.com/file/repo1.maven.org/maven2/org.springframework.security/spring-security-core/3.0.5.RELEASE/org/springframework/security/core/userdetails/jdbc/JdbcDaoImpl.java -->
	<bean id="jdbcAuthProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcAuthUserDetailsServicePermissions"/>
		<!-- optional if you intent to use EhCache to cache user repository -->
		<!-- <property name="userCache" ref="authUserCache"/> -->
	</bean>
	
	<!-- Datasource for MySQL authentication database acces -->
	<bean id="jdbcAuthDataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/jwebsocket"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>

	<!-- authentication with groups only, may NOT be sufficient for jWebSocket Plug-ins -->
	<bean id="jdbcAuthUserDetailsServiceAuthorities" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="jdbcAuthDataSource"/>
		<property name="enableGroups" value="false"/>
		<property name="enableAuthorities" value="true"/>
		<property name="authoritiesByUsernameQuery" value="
			select users.loginname, roles.name
			from itemStorageDataSourceuser_roles dur 
			left join itemStorageDataSourceroles roles on roles.role_id = dur.role_id 
			left join itemStorageDataSourceusers users on users.user_id = dur.user_id 
			where users.loginname = ?"/>
		<property name="usersByUsernameQuery" value="
			select loginname, password, enabled
			from itemStorageDataSourceusers where loginname = ?"/>
	</bean>	

	<!-- authentication with groups only, RECOMMENDED for jWebSocket Plug-ins -->
	<bean id="jdbcAuthUserDetailsServicePermissions" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="jdbcAuthDataSource"/>
		<property name="enableGroups" value="true"/>
		<property name="enableAuthorities" value="false"/>
		<property name="groupAuthoritiesByUsernameQuery" value="
			select roles.role_id, roles.name, rights.name
			from users users
			left join user_roles ur on users.user_id = ur.user_id
			left join roles_rights rr on ur.role_id = rr.role_id
			left join roles roles on roles.role_id = rr.role_id
			left join rights rights on rights.right_id = rr.right_id
			where users.loginname = ?"/>
		<property name="authoritiesByUsernameQuery" value="
			select users.loginname, roles.name
			from user_roles dur
			left join roles roles on roles.role_id = dur.role_id
			left join users users on users.user_id = dur.user_id
			where users.loginname = ?"/>
		<property name="usersByUsernameQuery" value="
			select loginname, password, enabled from users
			where loginname = ?"/>
	</bean>	
   
	<!-- ####### optional caching with ehcache ####### -->
	<bean id="authUserCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">	
		<!-- use this one if running separate ehcache config -->
		<!-- <property name="cache" ref="authCacheFactory"/> -->
		
		<!-- use this one if running jWebsocket internal ehcache config -->
		<property name="cache" ref="authEhCacheManager"/>
	</bean>

	<!-- if using jWebSocket internal EhCache Manager ... -->
	<bean id="authEhCacheManager" class="org.jwebsocket.storage.ehcache.EhCacheManager" factory-method="getCache">
		<!-- ensure that cache with name "authUserCache" is specified in ehcache.xml -->
		<constructor-arg value="authUserCache"/>
	</bean>
	
	<!-- if using extra/separate EhCache Manager for Spring security... -->
	<bean id="authCacheFactory" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager" ref="authCacheManager"/>
		<property name="cacheName" value="authUserCache"/>
	</bean>

	<bean id="authCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="file:///${JWEBSOCKET_HOME}conf/SystemPlugIn/ehcache.xml"/>
		<!-- property name="configLocation" value="classpath:/ehcache-failsafe.xml"/-->
	</bean>
	
	<!-- ####### optional password hashing with MD5 hashs ####### -->
	<bean id="authPasswordEncoderMD5" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

	<!-- ####### initialization of authentication provider ####### -->
	<bean id="authManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="providers">
			<list>
				<!-- Select here the authentication provider -->
				<!-- <ref local="ldapAuthProvider"/> -->				 
				<!-- <ref local="jdbcAuthProvider"/> -->
				<ref local="staticAuthProvider"/>
			</list>
		</property>
		<property name="eraseCredentialsAfterAuthentication" value="false" />
	</bean>

	<!-- 
		 SessionManager component for sessions management 
		 ************************************************
		 Uses JDBC (derby) by default, to switch the persistent storage
		 modify the storageProvider properties.
	-->
	<bean id="sessionManager" class="org.jwebsocket.session.SessionManager" 
		  init-method="initialize" destroy-method="shutdown">
		<!-- storage provider for client sessions-->
		<property name="storageProvider" ref="storageProviderJDBC"/>
		<property name="reconnectionManager">
			<bean class="org.jwebsocket.session.SessionReconnectionManager" 
				  init-method="initialize" destroy-method="shutdown">
				<!-- session expiration time in seconds -->
				<property name="sessionExpirationTime" value="60" />
				<property name="storageProvider" ref="storageProviderJDBC" />
			</bean>
		</property>
	</bean>
	
	<!--  EhCache Storage provider -->
	<bean id="storageProviderEhCache" class="org.jwebsocket.storage.ehcache.EhCacheStorageProvider">
	</bean>
	
	<!-- JDBC Storage provider -->
	<bean id="storageProviderJDBC" class="org.jwebsocket.storage.ormlite.OrmLiteStorageProvider" init-method="initialize">
		<constructor-arg index="0">
			<bean class="com.j256.ormlite.spring.DaoFactory"
				  factory-method="createDao">
				<constructor-arg index="0" >
					<bean class="com.j256.ormlite.jdbc.JdbcConnectionSource" init-method="initialize">
						<property name="url">
							<bean class="org.jwebsocket.config.JWebSocketConfig"
								  factory-method="expandEnvAndJWebSocketVars">
								<constructor-arg index="0" value="jdbc:derby:${JWEBSOCKET_HOME}database/sessions;create=true" />
							</bean>
						</property>
						<property name="databaseType">
							<bean class="com.j256.ormlite.db.DerbyEmbeddedDatabaseType" />
						</property>
					</bean>
				</constructor-arg>
				<constructor-arg index="1" value="org.jwebsocket.storage.ormlite.EntryEntity" />
			</bean>
		</constructor-arg>
	</bean>
	
	<!--  Memory Storage provider -->
	<bean id="storageProviderMemory" class="org.jwebsocket.storage.memory.MemoryStorageProvider">
	</bean>

	<!-- MongoDB Storage provider -->
	<bean id="storageProviderMongoDB" class="org.jwebsocket.storage.mongodb.MongoDBStorageProvider"
		  init-method="initialize" destroy-method="shutdown">
		<property name="connection" ref="mongodbConnection0" />
		<property name="databaseName" value="storages" />
		<property name="collectionName" value="__storages_collection__" />
	</bean>
	
	<!-- JMS Manager for internal/external JMS based messaging -->
	<bean id="jmsManager" class="org.jwebsocket.util.JMSManager" destroy-method="shutdown">
		<constructor-arg index="0" value="false"/>
		<constructor-arg index="1" ref="jmsConnection0"/>
		<constructor-arg index="2" value="topic://jwebsocket_messagehub"/>
	</bean>
	
	<!-- Setting the server EventBus for internal/external Token messaging -->
	<bean id="eventBus" class="org.jwebsocket.eventbus.JMSEventBus" 
		  init-method="initialize" destroy-method="shutdown">
		<constructor-arg index="0" ref="jmsConnection0"/>
		<constructor-arg index="1" value="event_bus"/>
	</bean>
	
	<!-- Annotation Manager for ActionPlugIn annotations support -->
	<!-- Default implementation supports annotations from package org.jwebsocket.plugins.annotations -->
	<bean id="annotationManager" class="org.jwebsocket.plugins.annotations.DefaultAnnotationManager">
	</bean>
</beans>
