<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Logging Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Logging Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script src="../../res/js/jwsLoggingPlugIn.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;

			function connect() {
				// URL is ws[s]://[hostname|localhost][:port][/context][/servlet/][;args...]
				// var lURL = "wss://localhost:9797/jWebSocket/jWebSocket"; // for Jetty SSL Servlet
				var lURL = jws.getDefaultServerURL();

				log( "Connecting to " + lURL + " ..." );
				if( lWSC.isConnected()) {
					log( "Already connected." );
					return;
				}

				try {
					lWSC.open( lURL, {

						// use JSON sub protocol
						subProtocol: jws.WS_SUBPROT_JSON,

						// OnOpen callback
						OnOpen: function( aEvent ) {
							log( "jWebSocket connection established." );
							jws.$("simgStatus").src = "../../images/connected.png";
						},

						// OnWelcome event
						OnWelcome: function( aEvent )  {
							log( "<font style='color:red'>jWebSocket Welcome received.</font>" );
						},

						// OnGoodBye event
						OnGoodBye: function( aEvent )  {
							log( "<font style='color:red'>jWebSocket GoodBye received.</font>" );
						},

						// OnMessage callback
						OnMessage: function( aEvent ) {
							log( "jWebSocket message received: '" + aEvent.data + "'" );

							if( lWSC.isLoggedIn() ) {
								jws.$("simgStatus").src = "../../images/authenticated.png";
							} else {
								jws.$("simgStatus").src = "../../images/connected.png";
							}
							jws.$("slblClientId").innerHTML =
								"&nbsp;Client&#x2011;Id:&nbsp;"
								+ lWSC.getId() + "&nbsp;"
								+ ( jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)" );

						},

						// OnClose callback
						OnClose: function( aEvent ) {
							log( "jWebSocket connection closed." );

							jws.$("simgStatus").src = "../../images/disconnected.png";
							jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
						}

					});
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}

			function disconnect() {
				if( lWSC ) {
					log( "Disconnecting..." );
					try {
						var lRes = lWSC.close({ timeout: 3000 });
						if( lRes.code == 0 ) {
							// it's send with timeout, so wait for server response
							// log( "Disconnected." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}
			
			function sum(){
				lWSC.sendToken({
					ns: 'org.jwebsocket.plugins.calc',
					type: 'sum',
					a: parseFloat(jws.$('argA').value),
					b: parseFloat(jws.$('argB').value)
				}, {
					OnSuccess: function(aResponse){
						alert('La respuseta es: ' + aResponse.result);
					},
					OnFailure: function(aError){
						
					},
					OnResponse: function(aResponse){
						
					}
				});
			}

			function login() {
				if( lWSC ) {
					log( "Logging in..." );
					try {
						var lRes = lWSC.login( "guest", "aPassword" );
						if( lRes.code == 0 ) {
							log( "Asychronously waiting for response..." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}

			function logout() {
				if( lWSC ) {
					log( "Logging out..." );
					try {
						var lRes = lWSC.logout();
						if( lRes.code == 0 ) {
							log( "Asychronously waiting for response..." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}

			var lLogLevel = jws.LoggingPlugIn.DEBUG;

			function switchLevel() {
				if( document.getElementById( "srbtInfo" ).checked ) {
					lLogLevel = jws.LoggingPlugIn.INFO;
				} else if( document.getElementById( "srbtWarn" ).checked ) {
					lLogLevel = jws.LoggingPlugIn.WARN;
				} else if( document.getElementById( "srbtError" ).checked ) {
					lLogLevel = jws.LoggingPlugIn.ERROR;
				} else if( document.getElementById( "srbtFatal" ).checked ) {
					lLogLevel = jws.LoggingPlugIn.FATAL;
				} else {
					lLogLevel = jws.LoggingPlugIn.DEBUG;
				}
			}

			function sendLog() {
				var lMsg = eMessage.value;
				log( "Logging '" + lMsg + "'..." );
				try {
					var lRes = lWSC.loggingLog( lLogLevel, null, lMsg, {
						OnResponse: function( aToken ) {
							log( "Logged: " + aToken.msg );
						}
					});
					if( lRes.code != 0 ) {
						log( "Error: " + lRes.msg );
					}
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}
			
			function logEvent() {
				var lMsg = eMessage.value;
				log( "Logging '" + lMsg + "'..." );
				try {
					var lNow = new Date();
					var lData = {
						"MESSAGE": lMsg,
						"BROWSER": "Mein Browser",
						"IP": "${ip}",
						"TIMESTAMP": "TO_DATE( '" +
							lNow.getUTCFullYear().toString() + "/" +
							jws.tools.zerofill( lNow.getUTCMonth() + 1, 2 ) + "/" +
							jws.tools.zerofill( lNow.getUTCDate(), 2 ) + " " +
							jws.tools.zerofill( lNow.getUTCHours(), 2 ) + "/" +
							jws.tools.zerofill( lNow.getUTCMinutes(), 2 ) + "/" +
							jws.tools.zerofill( lNow.getUTCSeconds(), 2 ) +
							"','YYYY/MM/DD HH24/MI/SS')"
					};
					var lRes = lWSC.loggingEvent( "ACTION_LOG", lData, {
						primaryKey: "ID",
						sequence: "SQ_ACTION_LOG_ID",
						OnResponse: function( aToken ) {
							log( "Logged: " + aToken.msg );
						}
					});
					if( lRes.code != 0 ) {
						log( "Error: " + lRes.msg );
					}
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}
			
			function getLogEvents() {
				log( "Retreiving events..." );
				try {
					var lRes = lWSC.loggingGetEvents( "ACTION_LOG", {
						OnResponse: function( aToken ) {
							log( "Events: " + aToken.data );
						}
					});
					if( lRes.code != 0 ) {
						log( "Error: " + lRes.msg );
					}
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}
			
			function initPage() {
				eLog = jws.$( "sdivLog" );
				eMessage = jws.$( "stxfMsg" );

				if( window.WebSocket ) {
					lWSC = new jws.jWebSocketJSONClient();
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfMsg" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnSend" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/fundamentals/fundamentals.htm" );
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket Logging Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>

		<p>This demo shows how to easily log client side events like infos, debug messages, warnings, errors or exceptions
			on the server.</p>
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"
							   >
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td class="stdDlg" width="5">Message</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfMsg" type="text" value="Please type your message here!" style="width:100%">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSend" type="button" value="Log" onclick="sendLog();">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnEvent" type="button" value="Event" onclick="logEvent();"
							   title="Logs an event." >
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="login();"
							   title="Authenticates you against the jWebSocket Server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="logout();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						&nbsp;
					</td>
					<td class="stdDlg" width="5">
						Level
					</td>
					<td class="stdDlg" width="" >
						Debug<input class="sbtnDlg" id="srbtDebug" type="radio" value="debug" name="g1" checked="checked" onclick="switchLevel();"
									title="Sets the log level to 'debug'." >
						| Info<input class="sbtnDlg" id="srbtInfo" type="radio" value="info" name="g1" onclick="switchLevel();"
									 title="Sets the log level to 'info'." >
						| Warn<input class="sbtnDlg" id="srbtWarn" type="radio" value="warn" name="g1" onclick="switchLevel();"
									 title="Sets the log level to 'warn'." >
						| Error<input class="sbtnDlg" id="srbtError" type="radio" value="error" name="g1" onclick="switchLevel();"
									  title="Sets the log level to 'error'." >
						| Fatal<input class="sbtnDlg" id="srbtFatal" type="radio" value="fatal" name="g1" onclick="switchLevel();"
									  title="Sets the log level to 'fatal'." >
					</td>
					<td class="stdDlg" width="5">
						&nbsp;
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnEvent" type="button" value="Get Events" onclick="getLogEvents();"
							   title="Gets all logs." >
					</td>
				</tr>
				<tr>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="argB" type="text" value="" style="width:100%">
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="argA" type="text" value="" style="width:100%">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSend" type="button" value="Sum" onclick="sum();">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
