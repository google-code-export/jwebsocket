<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Hello World (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Hello World</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<!-- load the jWebSocket JavaScript client library -->
		<script type="text/javascript" src="../../res/js/jWebSocket.js"></script>
		<!-- this one imports the client side sample plug-in -->
		<script type="text/javascript" src="../../res/js/jwsSamplesPlugIn.js"></script>
		<!-- this one imports the client side JDBC plug-in -->
		<script type="text/javascript" src="../../res/js/jwsJDBCPlugIn.js"></script>
		<!-- this one imports the client side reporting plug-in -->
		<script type="text/javascript" src="../../res/js/jwsReportingPlugIn.js"></script>
		<!-- this one imports the client side rpc plug-in -->
		<script type="text/javascript" src="../../res/js/jwsRPCPlugIn.js"></script>
		<script type="text/javascript" src="../../lib/jszip/jszip.js"></script>
		<script type="text/javascript" src="../../lib/jszip/jszip-load.js"></script>
		<script type="text/javascript" src="../../lib/jszip/jszip-deflate.js"></script>
		<script type="text/javascript" src="../../lib/jszip/jszip-inflate.js"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;
			// declared globally only to show username also on log off
			var gUsername = null;

			function logon() {
				var lURL = jws.getDefaultServerURL();

				gUsername = eUsername.value;
				var lPassword = ePassword.value;
				
				// optionally reset the password to force
				// re-typing after a disconnect or logout.
				// ePassword.value = "";

				log( "Connecting to " + lURL + " and logging in as '" + gUsername + "'..." );
				var lRes = lWSC.logon( lURL, gUsername, lPassword, {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection established.</font>" );
						jws.$("simgStatus").src = "../../images/connected.png";
					},
					
					OnWelcome: function( aEvent )  {
						log( "<font style='color:red'>jWebSocket Welcome received.</font>" );
					},
					
					OnGoodBye: function( aEvent )  {
						log( "<font style='color:red'>jWebSocket GoodBye received.</font>" );
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						var lDate = "";
						if( aToken.date_val ) {
							lDate = jws.tools.ISO2Date( aToken.date_val );
						}
						log( "<font style='color:#888'>jWebSocket '" + aToken.type + "' token received, full message: '" + aEvent.data + "' " + lDate + "</font>" );
						if( lWSC.isLoggedIn() ) {
							jws.$("simgStatus").src = "../../images/authenticated.png";
						} else {
							jws.$("simgStatus").src = "../../images/connected.png";
						}
						jws.$("slblClientId").innerHTML =
							"&nbsp;Client&#x2011;Id:&nbsp;"
							+ lWSC.getId() + "&nbsp;"
							+ ( jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)" );
					},
					
					OnToken: function(aToken){
					},
					
					// OnClose callback
					OnClose: function( aEvent ) {
						log( "<font style='color:#888'>jWebSocket connection closed.</font>" );
						jws.$("simgStatus").src = "../../images/disconnected.png";
						jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
					}
				});

				log( lWSC.resultToString( lRes ) );
			}

			function logoff() {
				if( lWSC ) {
					log( "Logging off " + ( gUsername != null ? "'" + gUsername + "'" : "" ) + " and disconnecting..." );
					// the timeout below  is optional,
					// if you use it you'll get a good-bye message.
					var lRes = lWSC.close({ timeout: 3000 });
					log( lWSC.resultToString( lRes ) );
				}
			}

			function broadcast() {
				var lMsg = eMessage.value;
				if( lMsg.length > 0 ) {
					log( "Broadcasting '" + lMsg + "'..." );
					var lRes = lWSC.broadcastText(
					"",		// broadcast to all clients (not limited to a certain pool)
					lMsg	// broadcast this message
				);
					// you may want log error only,
					// on success don't confuse the user
					// if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
					//  }
					//
					// optionally clear message to not accidentally send it twice
					// eMessage.value = "";
				}
			}

			// example how to exchange arbitrary complex objects between clients
			// the processComplexObject method in the server side sample plug-in
			function exchangeComplexObjects() {
				log( "Retreiving a complex object from the server via WebSockets..." );
				if( lWSC.isConnected() ) {
					var lToken = {
						ns: jws.SamplesPlugIn.NS,
						type: "processComplexObject",
						int_val: 1234,
						float_val: 1234.5678,
						bool_val: true,
						date_val: jws.tools.date2ISO( new Date() ),
						object: {
							field1: "value1",
							field2: "value2",
							array1: [ "array1Item1", "array1Item2" ],
							array2: [ "array2Item1", "array2Item2" ],
							object1: { obj1field1: "obj1value1", obj1field2: "obj1value2" },
							object2: { obj2field1: "obj2value1", obj2field2: "obj2value2" }
						}
					};
					lWSC.sendToken( lToken,	{
					});
				} else {
					log( "Not connected." );
				}
			}

			// example how to exchange data with a server side listener
			function sampleListener() {
				log( "Retreiving a token from the server via a jWebSocket listener..." );
				if( lWSC.isConnected() ) {
					var lToken = {
						// ns: "my.namespace",
						// type: "getInfo"
						ns: "tld.domain.plugins.myplugin",
						type: "mydemo_function"
					};
					lWSC.sendToken( lToken,	{
						OnResponse: function( aToken ) {
							log("Server responded: "
								+ "vendor: " + aToken.vendor
								+ ", version: " + aToken.version
						);
						}
					});
				} else {
					log( "Not connected." );
				}
			}

			// example how to obtain any tokenizable object fro the server
			function sampleTokenizable() {
				log( "Retreiving a tokenizable object from the server via a jWebSocket listener..." );
				if( lWSC.isConnected() ) {
					var lToken = {
						ns: "my.namespace",
						type: "getTokenizable"
					};
					lWSC.sendToken( lToken,	{
						OnResponse: function( aToken ) {
							log("Server responded: "
								+ "aToken: " + aToken
						);
						}
					});
				} else {
					log( "Not connected." );
				}
			}

			// example how to request a result from a server side plugin
			function sampleGetTime() {
				log( "Requesting server time via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.requestServerTime();
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
			}

			function getServerTimeCallback( aToken ) {
				log( "Server time: " + aToken.time );
			}

			// example how to request a result from a server side plugin
			function sampleRPC() {
				log( "Calling RPC via WebSockets..." );
				// call the getMD5 method of the server
				/*
				var lRes = lWSC.rpc(
					"org.jwebsocket.rpc.sample.SampleRPCLibrary", // class
					"getMD5", // method
					[ eMessage.value ],  // args
					{
						
					}
				);
				 */
				// call the getMD5 method of the server
				var lRes = lWSC.rpc(
				"org.jwebsocket.rpc.sample.SampleRPCLibrary", // class
				"runListDemo", // method
				[ // args, a list in an array of arguments
					// 1234	// int
					// eMessage.value // string
					[ 1, 2, 3, 4, "a", "b", "c", "d" ] // array/list
				],
				{

				}
			);
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
			}

			// example how to request a result from a server side plugin
			
			function sampleSelect() {
				
				// example how to request a database 
				// result from a server side plugin
				log( "Requesting JDBC data via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.jdbcQuerySQL("select * from demo_master");
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
				
				/*
				log( "Requesting JDBC data via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.jdbcSelect({
					tables	: [ "demo_master" ],
					fields	: [ "*" ],
					orders	: [ "master_id" ],
					where	: "",
					group	: "",
					having	: ""
				});
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
				 */
				/*
				log( "Updating JDBC data via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.jdbcUpdate({
					table	: "demo_master",
					fields	: [ "master_string" ],
					values	: [ "Master Row #1 (updated)" ],
					where	: "master_id=1"
				});
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
				 */
				/*
				log( "Inserting JDBC data via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.jdbcInsert({
					table	: "demo_master",
					fields	: [ "master_string" ],
					values	: [ "Master Row #1 (updated)" ]
				});
				// log error only, on success don't confuse the user
				if( lRes.code != 0 ) {
					log( lWSC.resultToString( lRes ) );
				}
				 */
				/*
				log( "Deleting JDBC data via WebSockets..." );
				// call the getTime method of the client side plug-in
				var lRes = lWSC.jdbcDelete({
					table	: "demo_master",
					where	: "master_id=6"
				});
				 */
			}
			
			function cgiTest() {
				lWSC.sendToken({
					ns: "org.jwebsocket.plugins.system",
					type: "send",
					subType: "exec",
					unid: "ssal",
					cmd: "test()"
				});
			}

			function initPage() {
				eLog = jws.$( "sdivChat" );
				eMessage = jws.$( "stxfMessage" );
				eUsername = jws.$( "stxfUsername" );
				ePassword = jws.$( "spwfPassword" );

				// jws.browserSupportsWebSockets checks web if sockets are available
				// either natively, by the Flash Bridge or by the Chrome Frame.
				if( jws.browserSupportsWebSockets() ) {
					lWSC = new jws.jWebSocketJSONClient({
						OnWelcome: ""
					});
					lWSC.setSamplesCallbacks({
						OnSamplesServerTime: getServerTimeCallback
					});
					eUsername.focus();
				} else {
					jws.$( "sbtnLogon" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnLogoff" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnBroadcast" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfMessage" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfUsername" ).setAttribute( "disabled", "disabled" );
					jws.$( "spwfPassword" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				logoff();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/hello_world/hello_world.htm" );
				// location.href = "../../index.htm?page=demos/hello_world/hello_world.htm" ;
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket Hello World</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>
		<p>This little &quot;Hello World&quot; demonstrates how to easily logon to the jWebSocket Server, broadcast a message and logoff again.<br/>
			Please use the browser's show frame source function to see the entire source code of this page.
		</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">Username</td>
					<td class="stdDlg" width="5">
						<input class="stxfDlg" id="stxfUsername" type="text" value="root" style="width:150px"
							   title="jWebSocket username or 'root' for demo.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogon" type="button" value="Login" onclick="logon();"
							   title="Authenticates you against the jWebSocket Server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnExCmObj" type="button" value="Complex Obj." onclick="exchangeComplexObjects();"
							   title="Retreives a 'complex' JSON object from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnListener" type="button" value="Listener" onclick="sampleListener();"
							   title="Retreives a result (copyright and license token) from a server side listener.">
					</td>
					<td class="stdDlg" width="">
						<input class="sbtnDlg" id="sbtnTokenizable" type="button" value="Tokenizable" onclick="sampleTokenizable();"
							   title="Retreives a tokenizable object from a server via a listener.">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Password</td>
					<td class="stdDlg" width="5">
						<input class="spwfDlg" id="spwfPassword" type="password" value="root" style="width:150px"
							   title="jWebSocket password or 'root' for demo.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogoff" type="button" value="Logout" onclick="logoff();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnBroadcast" type="button" value="Broadcast" onclick="broadcast();"
							   title="Broadcasts the message below to all connected clients.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnGetTime" type="button" value="GetTime" onclick="sampleGetTime();"
							   title="Retreives the current system time from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSelect" type="button" value="Select" onclick="sampleSelect();"
							   title="Retreives a single record from a JDBC datasource on the server.">
					</td>
					<td class="stdDlg" width="">
						<input class="sbtnDlg" id="sbtnRPC" type="button" value="RPC" onclick="sampleRPC();"
							   title="Shows how to call a simple RPC on the server.">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Message</td>
					<td class="stdDlg" width="" colspan="7">
						<input class="stxfDlg" id="stxfMessage" type="text" value="Your Message" style="width:99%"
							   title="Message to be broadcasted or save to file on the jWebSocket Server.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
