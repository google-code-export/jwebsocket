<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Canvas Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Canvas Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var MAX_IFRAMES_FOR_STRESS_TEST = 2;
			var lJWSID = "jWebSocket Canvas";
			var lWSC = null;
			var eLog = null;

			var IN = 0;
			var OUT = 1;
			var EVT = 2;
			var SYS = "SYS";
			var USR = null;

			// append a line to the log text area
			function log( aUsername, aEvent, aString ) {
				var lFlag;
				switch( aEvent ) {
					case IN: lFlag = "<"; break;
					case OUT: lFlag = ">"; break;
					case EVT: lFlag = "*"; break;
					default: lFlag = "?";
				}
				// set a default user name if not yet logged in
				if( !aUsername ) {
					aUsername = lWSC.getUsername();
				}
				if( !aUsername ) {
					aUsername = "USR";
				}
				eLog.innerHTML +=
					aUsername + " " +
					lFlag + " " +
					aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function doOpen() {
				// URL is ws[s]://[hostname|localhost][:port][/context][/servlet/][;args...]
				// deprecated: JWS_SERVER_URL;
				var lURL = jws.getDefaultServerURL() + "/;timeout=360000";

				log( SYS, OUT, "Connecting to " + lJWSID + " at " + lURL + "..." );

				// try to establish connection to jWebSocket server
				lWSC.logon( lURL, "guest", "guest", {

					// OnOpen callback
					OnOpen: function( aEvent ) {
						log( SYS, IN, "Connection to " + lJWSID + " established." );
						// start keep alive if user selected that option
						lWSC.startKeepAlive({ interval: 30000 });
					},

					// OnMessage callback
					OnMessage: function( aEvent, aToken ) {
						// for debug purposes
						/*
						log( SYS, EVT, "<font style='color:#888'>" +
							( aToken ? aToken.type : "-" ) + ": " +
							aEvent.data + "</font>");
						*/
					},

					// OnClose callback
					OnClose: function( aEvent ) {
						lWSC.stopKeepAlive();
						log( SYS, IN, "Disconnected from " + lJWSID + "." );
					}
					
				});
			}

			function doClose() {
				// disconnect automatically logs out!
				lWSC.stopKeepAlive();
				var lRes = lWSC.close({
					// wait a maximum of 3 seconds for server good bye message
					timeout: 3000
				});
				log( SYS, OUT, "logout: " + lRes.msg );
			}

			function broadcast() {
				var lMsg = eMessage.value;
				if( lMsg.length > 0 ) {
					log( USR, OUT, lMsg );
					var lRes = lWSC.broadcastText(
						"",		// broadcast to all clients (not limited to a certain pool)
						lMsg	// broadcast this message
					);
					// log error only, on success don't confuse the user
					if( lRes.code != 0 ) {
						log( SYS, OUT, "broadcast: " + lRes.msg );
					}
					eMessage.value = "";
				}
				doFocus( eMessage );
			}

			function usrKeyDnLsnr( aEvent ) {
				// on enter in username field try to login
				if( aEvent.keyCode == 13 ) {
					doOpen();
				}
			}

			function msgKeyDnLsnr( aEvent ) {
				// on enter in message field send broadcast the message
				if( !aEvent.shiftKey && aEvent.keyCode == 13 ) {
					broadcast();
				}
			}

			function elemFocusLsnr( aEvent ) {
				// on focus select full text of element (for username and message)
				jws.events.getTarget( aEvent ).select();
			}

			function stressTest() {
				eStressBtn.setAttribute("disabled", "disabled");
				for( var i = 0; i < MAX_IFRAMES_FOR_STRESS_TEST; i++) {
					var lIframe = document.createElement( "iframe" );
					lIframe.src = "iframe.htm";
					lIframe.id = "iframe" + i;
					lIframe.setAttribute( "frameborder", "0" );
					lIframe.style.width = "335px";
					lIframe.style.height = "270px";
					lIframe.style.border = "1px solid #ccc";
					lIframe.style.margin = "2px";
					document.body.appendChild( lIframe );
				}
			}

			function initPage() {
				eLog = jws.$("sdivChat");
				eStressBtn = jws.$("sbtnStressTest");
				// check if WebSockets are supported by the browser
				if( jws.browserSupportsWebSockets() ) {
					// instaniate new TokenClient, either JSON, CSV or XML
					lWSC = new jws.jWebSocketJSONClient();
					doOpen();
				} else {
					jws.$( "sbtnClearLog" ).setAttribute( "disabled", "disabled" );
					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( SYS, IN, lMsg );
				}
			}

			function exitPage() {
				// this allows the server to release the current session
				// immediately w/o waiting on the timeout.
				if( lWSC ) {
					lWSC.close({
						// force immediate client side disconnect
						timeout: 0
					});
				}
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
<!--
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/canvas/canvas.htm" );
			}
		</script>
-->
		<h1>jWebSocket Canvas Demo</h1>
		<p>This demo shows how to commonly work or play together on a shared canvas. Updates applied to a certain canvas
			are automatically distributed to all other clients connected to the jWebSocket network. Simply take the mouse,
			select a color and draw something. Please consider that not all browsers do support the HTML5 Canvas element yet.
			In this demo each Canvas is embedded in an iframe. Multiple WebSocket connections per browser window,
			per tab or per frame/iframe can be used concurrently. Check the Stress Test to open more Canvas's.</p>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="" align="right">
						<input style="display:none" class="sbtnDlg" id="sbtnClearLog" type="button" value="Clear Log" onclick="clearLog();">
					</td>
					<td class="stdDlg" width="" align="right">
						<input class="sbtnDlg" id="sbtnStressTest" type="button" value="Stress Test" onclick="stressTest();"
							   title="Opens a configurable amount of iframes with canvas elements, to draw on. Change the JavaScript code to adjust the number of iframes (MAX_IFRAMES_FOR_STRESS_TEST).">
					</td>
				</tr>
			</table>
		</div>
		<div id="sdivChat" class="sdivContainer"
			 style="position:relative; height:50px; overflow:auto; display:none">
		</div>
		<table width="100%">
			<tr>
				<td><iframe style="width:100%; height:280px; border:1px solid #ccc" id="target1" frameborder="0" src="iframe.htm"></iframe></td>
				<td><iframe style="width:100%; height:280px; border:1px solid #ccc" id="target2" frameborder="0" src="iframe.htm"></iframe></td>
			</tr>
		</table>
	</body>
</html>
