<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Fundamentals Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Fundamentals Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

		<script type="text/javascript">
			window.WEB_SOCKET_FORCE_FLASH = false;
//			window.WEB_SOCKET_DEBUG = true;
		</script>
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script src="../../res/js/jWebSocketComet.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;
			var eReconnect = null;

			function log(aString) {
				eLog.innerHTML +=
						aString + "<br>";
				if (eLog.scrollHeight > eLog.clientHeight) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;

			function connect() {
				// URL is ws[s]://[hostname|localhost][:port][/context][/servlet/][;args...]
				// var lURL = "wss://localhost:9797/jWebSocket/jWebSocket"; // for Jetty SSL Servlet
				// var lURL = jws.getDefaultServerCometURL();
				// jws.enableCometSupportForWebSockets();
				var lURL = jws.getAutoServerURL();
				log("Connecting to " + lURL + " ...");
				if (lWSC.isConnected()) {
					log("Already connected.");
					return;
				}

				try {
					lWSC.open(lURL, {
						// use JSON sub protocol
						subProtocol: jws.WS_SUBPROT_JSON,
						// connection timeout in ms
						openTimeout: 6000,
						// OnConnectionTimeout callback
						OnOpenTimeout: function(aEvent) {
							log("Opening timeout exceeded!");
							jws.$("simgStatus").src = "../../images/disconnected.png";
						},
						// OnOpen callback
						OnOpen: function(aEvent) {
							log("jWebSocket connection established.");
							jws.$("simgStatus").src = "../../images/connected.png";
						},
						// OnWelcome event
						OnWelcome: function(aEvent) {
							log("<font style='color:red'>jWebSocket Welcome received.</font>");
						},
						// OnGoodBye event
						OnGoodBye: function(aEvent) {
							log("<font style='color:red'>jWebSocket GoodBye received.</font>");
						},
						// OnMessage callback
						OnMessage: function(aEvent) {
							log("jWebSocket message received: '" + aEvent.data + "'");

							if (lWSC.isLoggedIn()) {
								jws.$("simgStatus").src = "../../images/authenticated.png";
							} else {
								jws.$("simgStatus").src = "../../images/connected.png";
							}
							jws.$("slblClientId").innerHTML =
									"&nbsp;Client&#x2011;Id:&nbsp;"
									+ lWSC.getId() + "&nbsp;"
									+ (jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)");

						},
						// OnReconnecting callback
						OnReconnecting: function(aEvent) {
							log("Re-establishing jWebSocket connection...");
						},
						// OnClose callback
						OnClose: function(aEvent) {
							log("jWebSocket connection closed, reason: '" + aEvent.reason + "'");

							jws.$("simgStatus").src = "../../images/disconnected.png";
							jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
						}

					});
				} catch (ex) {
					log("Exception: " + ex.message);
				}

				// since the login/logout functions are done in the system
				// plug-in these listener consequently are assigned for the 
				// plug-in and not for the plug-in itself.
				lWSC.setSystemCallbacks({
					// OnLoggedIn event
					OnLoggedIn: function(aEvent) {
						log("<font style='color:red'>jWebSocket LoggedIn received.</font>");
					},
					// OnLoginError event
					OnLoginError: function(aEvent) {
						log("<font style='color:red'>jWebSocket LoginError received.</font>");
					},
					// OnLoggedOut event
					OnLoggedOut: function(aEvent) {
						log("<font style='color:red'>jWebSocket LoggedOut received.</font>");
					},
					// OnLogoutError event
					OnLogoutError: function(aEvent) {
						log("<font style='color:red'>jWebSocket LogoutError received.</font>");
					},
					// OnLoggedOn event
					OnLoggedOn: function(aEvent) {
						log("<font style='color:red'>jWebSocket LoggedOn received.</font>");
					},
					// OnLogonError event
					OnLogonError: function(aEvent) {
						log("<font style='color:red'>jWebSocket LogonError received.</font>");
					},
					// OnLoggedOff event
					OnLoggedOff: function(aEvent) {
						log("<font style='color:red'>jWebSocket LoggedOff received.</font>");
					},
					// OnLogoffError event
					OnLogoffError: function(aEvent) {
						log("<font style='color:red'>jWebSocket LogoffError received.</font>");
					}
				});
			}

			function disconnect() {
				if (lWSC) {
					log("Disconnecting...");
					try {
						var lRes = lWSC.close({timeout: 3000});
						if (0 === lRes.code) {
							// it's send with timeout, so wait for server response
							// log( "Disconnected." );
						} else {
							log(lRes.msg);
						}
					} catch (lEx) {
						log("Exception: " + lEx.message);
					}
				}
			}

			function login() {
				if (lWSC) {
					log("Logging in...");
					try {
						var lRes = lWSC.login(
								jws.GUEST_USER_LOGINNAME,
								jws.GUEST_USER_PASSWORD
								);
						if (0 === lRes.code) {
							log("Asychronously waiting for response...");
						} else {
							log(lRes.msg);
						}
					} catch (ex) {
						log("Exception: " + ex.message);
					}
				}
			}

			function logout() {
				if (lWSC) {
					log("Logging out...");
					try {
						var lRes = lWSC.logout();
						if (0 === lRes.code) {
							log("Asychronously waiting for response...");
						} else {
							log(lRes.msg);
						}
					} catch (ex) {
						log("Exception: " + ex.message);
					}
				}
			}

			function auth() {
				if (lWSC) {
					log("Authenticating...");
					try {
						var lRes = lWSC.systemLogon(
								jws.GUEST_USER_LOGINNAME,
								jws.GUEST_USER_PASSWORD
								);
						if (0 === lRes.code) {
							log("Asychronously waiting for response...");
						} else {
							log(lRes.msg);
						}
					} catch (ex) {
						log("Exception: " + ex.message);
					}
				}
			}

			function deauth() {
				if (lWSC) {
					log("Deauthenticating...");
					try {
						var lRes = lWSC.systemLogoff();
						if (0 === lRes.code) {
							log("Asychronously waiting for response...");
						} else {
							log(lRes.msg);
						}
					} catch (ex) {
						log("Exception: " + ex.message);
					}
				}
			}

			function getAuth() {
				if (lWSC) {
					log("Getting authorities...");
					try {
						var lRes = lWSC.systemGetAuthorities();
						if (0 === lRes.code) {
							log("Asychronously waiting for response...");
						} else {
							log(lRes.msg);
						}
					} catch (ex) {
						log("Exception: " + ex.message);
					}
				}
			}

			function toggleReconnect() {
				if (lWSC) {
					var lReconnect = eReconnect.checked;
					log("Turning auto-reconnect " + (lReconnect ? "on" : "off"));
					lWSC.setReliabilityOptions(lReconnect ? jws.RO_ON : jws.RO_OFF);
				}
			}
			
			function toggleForceFlash() {
				if (lWSC) {
					window.WEB_SOCKET_FORCE_FLASH = eForceFlash.checked;
					log("Toggeling Force Flash Flag to '" + (window.WEB_SOCKET_FORCE_FLASH ? "on" : "off") + "'");
				}
			}

			function showReliabilityOptions() {
				if (lWSC) {
					var lOptions = lWSC.getReliabilityOptions();
					var lQueue = lWSC.getOutQueue();
					log("Reliability Options: "
							+ (lQueue ? lQueue.length : "no") + " items in queue"
							+ ", auto-reconnect: " + lOptions.autoReconnect
							+ ", reconnectDelay: " + lOptions.reconnectDelay
							+ ", queueItemLimit: " + lOptions.queueItemLimit
							+ ", queueSizeLimit: " + lOptions.queueSizeLimit
							);

				}
			}

			function echo() {
				var lMsg = eMessage.value;
				log("Sending '" + lMsg + "', waiting for echo...");
				try {
					var lRes = lWSC.echo(lMsg, {
						delay: 15000,
						echoTestSize: 1000 * 1000 * 6
					});
					if (0 === lRes.code) {
						log("Message sent.");
					} else {
						log(lRes.msg);
					}
				} catch (ex) {
					log("Exception: " + ex.message);
				}
			}

			function thread() {
				log("Starting method as thread...");
				var lRes = jws.runAsThread({
					method: function(aOut) {
						return("This method was called in a WebWorker thread and returned: " + aOut);
					},
					args: ["This was the passed argument"],
					OnMessage: function(aToken) {
						var lData = aToken.data;
						log("Result: " + lData);
					},
					OnError: function(aToken) {
						log("Error: " + aToken.message);
					}
				});
				log(lRes.msg);
			}

			function wait() {
				var lDuration = 5000;
				log("sending server wait (sleep) for '" + lDuration + "', milliseconds...");
				try {
					var lRes = lWSC.wait( lDuration, { spawnThread: false } );
					if (0 === lRes.code) {
						log("Message sent.");
					} else {
						log(lRes.msg);
					}
				} catch (ex) {
					log("Exception: " + ex.message);
				}
			}

			function test() {
				// use this for your individual test purposes
				/*
				 var lToken = {
				 };
				 lWSC.sendToken( lToken );
				 */
				// log( "Currently no custom specific tests assigned." );
				/*
				 for(var lIdx = 0; lIdx < 100; lIdx++ ) {
				 log( "This is a heavy load test:  " + lIdx );
				 }
				 */
				wait();
			}

			function initPage() {
				eLog = jws.$("sdivLog");
				eReconnect = jws.$("schkReconnect");
				eMessage = jws.$("stxfMsg");

				if (window.WebSocket) {
					lWSC = new jws.jWebSocketJSONClient({
						reliabilityOptions: {
							autoReconnect: eReconnect.checked,
							reconnectDelay: 5000
						}
						// jws.RO_ON
					});
				} else {
					jws.$("schkReconnect").setAttribute("disabled", "disabled");
					jws.$("sbtnConnect").setAttribute("disabled", "disabled");
					jws.$("sbtnDisconnect").setAttribute("disabled", "disabled");
					jws.$("sbtnClear").setAttribute("disabled", "disabled");
					jws.$("stxfMsg").setAttribute("disabled", "disabled");
					jws.$("sbtnSend").setAttribute("disabled", "disabled");

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert(lMsg);
					log(lMsg);
				}
			}

			function exitPage() {
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket Fundamentals Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>

		<p>This demo shows how to easily set up a minimum JSON communication via WebSockets between a jWebSocket client and a jWebSocket server.
			If you are not sure whether your favorite browser supports WebSockets please refer 
			to our <a target="_top" href="http://jwebsocket.org/jws_for_all.htm">jWebSocket Cross-Browser
				Compatibility</a> page.</p>
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"
							   title="Connects you to the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();"
							   title="Disconnects you from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td class="stdDlg" width="120">Message</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfMsg" type="text" value="Please type your message here!" style="width:100%">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSend" type="button" value="Echo" onclick="echo();">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="login();"
							   title="Logs you in into the jWebSocket Server using jWebSocket.xml authentication.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="logout();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnReliability" type="button" value="Conn.Opt." onclick="showReliabilityOptions();"
							   title="Returns the current connection reliability options." >
					</td>
					<td class="stdDlg" width="120" >Auto-Reconnect</td>
					<td class="stdDlg" width="">
						<input class="sbtnDlg" id="schkReconnect" type="checkbox" value="off" onclick="toggleReconnect();"
							   title="Toggle the auto-reconnect status.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Thread" onclick="thread();"
							   title="Runs the echo operation as a thread." >
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnAuth" type="button" value="Auth" onclick="auth();"
							   title="Authenticates you against the jWebSocket Server using new spring based authentication.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDeauth" type="button" value="De-Auth" onclick="deauth();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDeauth" type="button" value="Get Auth." onclick="getAuth();"
							   title="Retreives the authorities for the user.">
					</td>
					<td class="stdDlg" width="120" >Force Flash</td>
					<td class="stdDlg" width="">
						<input class="sbtnDlg" id="schkReconnect" type="checkbox" value="off" onclick="toggleForceFlash();"
							   title="Toggles to force flash instead of native WebSocket implementation.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnTest" type="button" value="Test" onclick="test();"
							   title="This starts a custome specific test method.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
