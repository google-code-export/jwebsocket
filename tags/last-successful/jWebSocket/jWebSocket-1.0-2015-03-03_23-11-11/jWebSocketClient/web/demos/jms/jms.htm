<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket JMS Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//  Author: Johannes Smutny
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type"
			  content="text/html; charset=windows-1252">
		<title>jWebSocket JMS Demo</title>
		<link rel="stylesheet" type="text/css"
			  href="../../res/css/jwebsocket.css">
		<!-- load the jWebSocket JavaScript client library -->
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<!-- this one imports the client side JMS plug-in -->
		<script type="text/javascript" src="../../res/js/jwsJMSPlugIn.js"></script>
		<script type="text/javascript" language="JavaScript">
			var eLog = null,
					eKeepAlive = null,
					eMessage = null,
					eChannelId = null,
					eChannelName = null,
					eAccessKey = null,
					eSecretKey = null,
					eIsPrivate = null,
					eIsSystem = null,
					eKeepAlive = null,
					eChannelSel = null;

			function log(aString) {
				eLog.innerHTML += aString + "<br>";
				if (eLog.scrollHeight > eLog.clientHeight) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			var lWSC = null;

			function login() {
				// URL is ws[s]://[hostname|localhost]:8787[/context][/servlet/][;args...]
				log("Login to " + jws.getAutoServerURL() + " ...");
				try {
					var lRes = lWSC.logon(
							jws.getDefaultServerURL(),
							jws.GUEST_USER_LOGINNAME,
							jws.GUEST_USER_PASSWORD,
							{
								// OnOpen callback
								OnOpen: function(aEvent) {
									log("<font style='color:#888'>jWebSocket connection established.</font>");
									jws.$("simgStatus").src = "../../images/connected.png";
								},
								OnWelcome: function() {
									//getChannels();
								},
								// OnMessage callback
								OnMessage: function(aEvent) {
									log("<font style='color:#888'>jWebSocket message received: '"
											+ aEvent.data + "'</font>");
									if (lWSC.isLoggedIn()) {
										jws.$("simgStatus").src = "../../images/authenticated.png";
									} else {
										jws.$("simgStatus").src = "../../images/connected.png";
									}
									jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;"
											+ lWSC.getId()
											+ "&nbsp;"
											+ (jws.browserSupportsNativeWebSockets ? "(native)"
											: "(flashbridge)");
								},
								// OnClose callback
								OnClose: function(aEvent) {
									log("<font style='color:#888'>jWebSocket connection closed.</font>");
									jws.$("simgStatus").src = "../../images/disconnected.png";
									jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
								}

							});
				} catch (ex) {
					log("Exception: " + ex.message);
				}
			}

			// log out the client from the jWebSocket server
			function logout() {
				if (lWSC) {
					lWSC.stopKeepAlive();
					log("Disconnecting...");
					var lRes = lWSC.close({
						timeout: 3000
					});
					log(lWSC.resultToString(lRes));
				}
			}

			function listen() {
				log("Listen...");
				lWSC.listenJms(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain()
						);
			}

			function listenMessage() {
				log("Listen message...");
				lWSC.listenJmsMessage(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain());
			}

			function unlisten() {
				log("Unlisten...");
				lWSC.unlistenJms(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain());
			}

			function sendText() {
				log("Sending Text...");
				lWSC.sendJmsText(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain(),
						getTextMessagePayLoad());
			}

			function sendTextMessage() {
				log("Sending Text Message...");
				lWSC.sendJmsTextMessage(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain(),
						getTextMessagePayLoad(),
						getJmsHeaderProperties());
			}

			function sendMap() {
				log("Sending Map...");
				lWSC.sendJmsMap(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain(),
						getMapMessagePayLoad());
			}

			function sendMapMessage() {
				log("Sending Map Message...");
				lWSC.sendJmsMapMessage(
						getConnectionFactoryName(),
						getDestinationName(),
						isPubSubDomain(),
						getMapMessagePayLoad(),
						getJmsHeaderProperties());
			}

			function onHandleJmsText(aEvent) {
				var msg = aEvent.msgPayLoad;
				log("text received:");
				log(msg);
			}

			function onHandleJmsTextMessage(aEvent) {
				var msg = aEvent.msgPayLoad;
				log("text message received:");
				log(msg + " with the following JMS headers: "
						+ getJmsHeadersToString(aEvent));
			}

			function onHandleJmsMap(aEvent) {
				var lMsg = aEvent.msgPayLoad;
				log("map received:" + JSON.stringify(lMsg));
			}

			function onHandleJmsMapMessage(aEvent) {
				var msg = aEvent.msgPayLoad;
				log("map message received:");
				log(msg + " with the following JMS headers: "
						+ getJmsHeadersToString(aEvent));
			}

			function getJmsHeadersToString(aEvent) {
				if (!aEvent.jmsHeaderProperties)
					return;

				var headers = aEvent.jmsHeaderProperties;
				var result = "";
				result += "JMSDestination: " + headers.JMSDestination + "; ";
				result += "JMSDeliveryMode: " + headers.JMSDeliveryMode + "; ";
				result += "JMSMessageID: " + headers.JMSMessageID + "; ";
				result += "JMSTimestamp: " + headers.JMSTimestamp + "; ";
				result += "JMSCorrelationID: " + headers.JMSCorrelationID + "; ";
				result += "JMSReplyTo: " + headers.JMSReplyTo + "; ";
				result += "JMSRedelivered: " + headers.JMSRedelivered + "; ";
				result += "JMSType: " + headers.JMSType + "; ";
				result += "JMSExpiration: " + headers.JMSExpiration + "; ";
				result += "JMSPriority: " + headers.JMSPriority;
				return result;
			}

			function getJmsHeaderProperties() {
				var lJMSReplyTo = {
					connectionFactoryName: getConnectionFactoryName(),
					destinationName: getDestinationName(),
					pubSubDomain: isPubSubDomain()
				};

				var lJmsHeaderProperties = {
					JMSCorrelationID: getJMSCorrelationID(),
					JMSReplyTo: lJMSReplyTo,
					JMSType: getJMSType()
				};

				return lJmsHeaderProperties;
			}

			function getMapMessagePayLoad() {
				return eval('(' + jws.$("stxfMap").value + ')');
			}

			function getTextMessagePayLoad() {
				return jws.$("stxfText").value;
			}

			function getConnectionFactoryName() {
				return jws.$("stxfConnectionFactoryName").value;
			}

			function getDestinationName() {
				return jws.$("stxfDestinationName").value;
			}

			function isPubSubDomain() {
				return jws.$("stxfPubSubDomain").checked;
			}

			function getJMSCorrelationID() {
				return jws.$("stxfJMSCorrelationID").value;
			}

			function getJMSType() {
				return jws.$("stxfJMSType").value;
			}

			function initPage() {
				eLog = jws.$("sdivChat");
				eMessage = jws.$("stxfMsg");

				if (jws.browserSupportsWebSockets()) {
					lWSC = new jws.jWebSocketJSONClient();
					lWSC.setJMSCallbacks({
						OnHandleJmsText: onHandleJmsText,
						OnHandleJmsTextMessage: onHandleJmsTextMessage,
						OnHandleJmsMap: onHandleJmsMap,
						OnHandleJmsMapMessage: onHandleJmsMapMessage
					});
				} else {
					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert(lMsg);
					log(lMsg);
				}
			}

			function exitPage() {
				lWSC.stopKeepAlive();
				logout();
			}
		</script>
	</head>

	<body onload="initPage();" onunload="exitPage();">
		<!--	remarked temporarily due to chrome 5 browser bug
			<script type="text/javascript">
				var lFrameElem = this.frameElement;
				if( !lFrameElem ) {
					location.replace( "../../index.htm?page=demos/streaming/streaming.htm" );
				}
			</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">jWebSocket JMS Demo</td>
				<td class="tdHeader" width="1%"><img id="simgStatus"
													 src="../../images/disconnected.png" align="right" />
				</td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span>
				</td>
			</tr>
		</table>
		<p>This demo shows how messages can be retrieved and broadcasted
			using a publish/subscribe or point-to-point mechanism based on JMS.</p>
		<div id="sdivChat" class="sdivContainer"
			 style="position: relative; height: 300px; overflow: auto;"></div>

		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0"
				   width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5"><input class="sbtnDlg"
														id="sbtnConnect" type="button" value="Login" onclick="login();"
														title="Authenticates you against the jWebSocket Server (using 'guest' account).">
					</td>
					<td class="stdDlg" width="5"><input class="sbtnDlg"
														id="sbtnDisconnect" type="button" value="Logout"
														onclick="logout();"
														title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">&nbsp;ConnectionFactory:</td>
					<td width=""><input class="stxfDlg"
										id="stxfConnectionFactoryName" type="text"
										value="connectionFactory" style="width: 99%"
										title="Name of the ConnectionFactory for creating JMS connections.">
					</td>

				</tr>
				<tr class="strDlg">
					<td width="5"><input class="sbtnDlg" id="sbtnListen"
										 type="button" value="Listen" onclick="listen();"
										 title="Listen to a JMS destination.">
					</td>
					<td class="stdDlg" width="5"><input class="sbtnDlg"
														id="sbtnClear" type="button" value="Clear Log"
														onclick="clearLog();"
														title="Clears the result and event log above."></td>
					<td class="stdDlg" width="5">&nbsp;Destination:</td>

					<td width=""><input class="stxfDlg" id="stxfDestinationName"
										type="text" value="testQueue" style="width: 99%"
										title="Enter the name of a JMS destination."></td>
				</tr>
				<tr class="strDlg">
					<td width="5"><input class="sbtnDlg" id="sbtnListenMessage"
										 type="button" value="Listen Msg" onclick="listenMessage();"
										 title="Listen to a JMS destination." /></td>
					<td width="5"><input class="sbtnDlg" id="sbtnSendText"
										 type="button" value="Send Text" onclick="sendText();"
										 title="Send text"></td>
					<td class="stdDlg" width="5">&nbsp;Topic:</td>
					<td width=""><input class="stxfDlg" id="stxfPubSubDomain"
										type="checkbox" title="isPubSubDomain" /></td>
				</tr>
				<tr class="strDlg">
					<td width="5"><input class="sbtnDlg" id="sbtUnlisten"
										 type="button" value="Unlisten" onclick="unlisten();"
										 title="Unlisten from a JMS destination." /></td>
					<td width="5"><input class="sbtnDlg" id="sbtnSendTextMessage"
										 type="button" value="Send Text Msg" onclick="sendTextMessage();"
										 title="Send text message" />
					</td>
					<td class="stdDlg" width="5">&nbsp;Text Message:</td>
					<td width=""><input class="stxfDlg" id="stxfText" type="text"
										value="text" style="width: 99%"
										title="Enter the content of text message"></td>
				</tr>
				<tr class="strDlg">
					<td width="5">
						<!-- input class="sbtnDlg" id="sbtUnlistenMessage"
						type="button" value="Unlisten Msg" onclick="unlistenMessage();"
						title="Unlisten from a JMS destination." /--></td>
					<td width="5"><input class="sbtnDlg" id="sbtnSendMap"
										 type="button" value="Send Map" onclick="sendMap();"
										 title="Send map." /></td>
					<td class="stdDlg" width="5">&nbsp;Map message:</td>
					<td width=""><input class="stxfDlg" id="stxfMap" type="text"
										value="{&quot;first&quot;:&quot;first&quot;,&quot;second&quot;:&quot;second&quot;,&quot;third&quot;:&quot;third&quot;}"
										style="width: 99%" title="Enter the content of map message">
					</td>
				</tr>
				<tr class="strDlg">
					<td width="5"></td>
					<td width="5"><input class="sbtnDlg" id="sbtnSendMapMessage"
										 type="button" value="Send Map Msg" onclick="sendMapMessage();"
										 title="Send map message." />
					</td>
					<td class="stdDlg" width="5">&nbsp;JMSCorrelationID:</td>
					<td width=""><input class="stxfDlg" id="stxfJMSCorrelationID"
										type="text" value="JMSCorrelationID" style="width: 99%"
										title="Enter the jms header JMSCorrelationID"></td>
				</tr>
				<tr class="strDlg">
					<td width="5" />
					<td width="5" />
					<td class="stdDlg" width="5">&nbsp;JMSType:</td>
					<td width=""><input class="stxfDlg" id="stxfJMSType"
										type="text" value="JMSType" style="width: 99%"
										title="Enter the jms header JMSType"></td>
				</tr>
			</table>
		</div>

	</body>
</html>
