<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket CGI Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket Common Gateway Interface (CGI) Demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script type="text/javascript" language="JavaScript">

			var lWSC = null;

			var eLog = null;
			var eCmd = null;
			var eArgs = null;
			var eTarget = null;
			var eNode = null;

			function log( aString ) {
				eLog.innerHTML +=
					aString.replace( /</g, "&lt;" ).replace( />/g, "&gt;" ) + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function connect() {
				// URL is ws[s]://[hostname|localhost][:port][/context][/servlet/][;args...]
				// var lURL = "wss://localhost:9797/jWebSocket/jWebSocket"; // for Jetty SSL Servlet
				var lURL = jws.getDefaultServerURL();

				log( "Connecting to " + lURL + " ..." );
				if( lWSC.isConnected()) {
					log( "Already connected." );
					return;
				}

				try {
					lWSC.open( lURL, {

						// use JSON sub protocol
						subProtocol: jws.WS_SUBPROT_JSON,

						// OnOpen callback
						OnOpen: function( aEvent ) {
							log( "jWebSocket connection established." );
							jws.$("simgStatus").src = "../../images/connected.png";
						},

						// OnWelcome event
						OnWelcome: function( aEvent )  {
							log( "jWebSocket Welcome received." );
						},

						// OnGoodBye event
						OnGoodBye: function( aEvent )  {
							log( "jWebSocket GoodBye received." );
						},

						// OnMessage callback
						OnMessage: function( aEvent ) {
							log( "jWebSocket message received: '" + aEvent.data + "'" );

							if( lWSC.isLoggedIn() ) {
								jws.$("simgStatus").src = "../../images/authenticated.png";
							} else {
								jws.$("simgStatus").src = "../../images/connected.png";
							}
							jws.$("slblClientId").innerHTML =
								"&nbsp;Client&#x2011;Id:&nbsp;"
								+ lWSC.getId() + "&nbsp;"
								+ ( jws.browserSupportsNativeWebSockets ? "(native)" : "(flashbridge)" );

						},

						// OnClose callback
						OnClose: function( aEvent ) {
							log( "jWebSocket connection closed." );

							jws.$("simgStatus").src = "../../images/disconnected.png";
							jws.$("slblClientId").innerHTML = "&nbsp;Client&#x2011;Id:&nbsp;-";
						}

					});
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}

			function disconnect() {
				if( lWSC ) {
					log( "Disconnecting..." );
					try {
						var lRes = lWSC.close({ timeout: 3000 });
						if( lRes.code == 0 ) {
							// it's send with timeout, so wait for server response
							// log( "Disconnected." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}

			function login() {
				if( lWSC ) {
					log( "Logging in..." );
					try {
						var lRes = lWSC.login( "guest", "aPassword" );
						if( lRes.code == 0 ) {
							log( "Asychronously waiting for response..." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}

			function logout() {
				if( lWSC ) {
					log( "Logging out..." );
					try {
						var lRes = lWSC.logout();
						if( lRes.code == 0 ) {
							log( "Asychronously waiting for response..." );
						} else {
							log( lRes.msg );
						}
					} catch( ex ) {
						log( "Exception: " + ex.message );
					}
				}
			}
			
			function getPendingResponsesString() {
				var lOut = "";
				for( var lField in lWSC.fRequestCallbacks ) {
					lOut += lField + " ";
				}
				return lOut ? lOut : "[none]";
			}

			function getPendingResponses() {
				log( "Retreiving pending responses: "
					+ getPendingResponsesString());
			}

			function wait() {
				var lRes = lWSC.wait( parseInt( eDuration.value ), {

					OnResponse: function( aToken ) {
						log( "Response received within timeout: "
							+ getPendingResponsesString() );
					},

					OnTimeout: function( aToken ) {
						log( "Token " + aToken.utid 
							+ " was not answered within "
							+ aToken.timeout + " ms, response timed out!" );
					},

					spawnThread: true,
					responseRequested: eReqResp.checked,
					timeout: parseInt( eTimeout.value )
				});

				log( lWSC.resultToString( lRes ) );
			}

			function sendCommand() {
				var lMsg = eCmd.value;
				log( "Sending command '" + lMsg + "'..." );
				var lArgs = eArgs.value;
				lArgs = lArgs.replace( /\"/g, "&22");
				lArgs = lArgs.replace( /\=/g, "&3D");
				try {
					var lToken = {
						ns: "org.jwebsocket.plugins.system",
						type: "send",
						subType: eCmd.value,	// e.g. exec
						cmd: lArgs				// e.g. dir
					};
					if( eNode.value ) {
						lToken.unid = eNode.value;
					} else {
						lToken.targetId = eTarget.value;
					}
					var lRes = lWSC.sendToken( lToken, {
						timeout: 3000,
						OnResponse: function( aToken ) {
							log( "Resonse: " + JSON.stringify( aToken ));
						},
						OnTimeout: function( aToken ) {
							log( "Timeout: " + JSON.stringify( aToken ));
						}
					});
					if( lRes.code == 0 ) {
						log( "Message sent." );
					} else {
						log( lRes.msg );
					}
				} catch( ex ) {
					log( "Exception: " + ex.message );
				}
			}

			function runCGI( aCGICmd, aTimeout ) {
				var lToken = {
					ns: "org.jwebsocket.plugins.system",
					type: "send",
					targetId: eTarget.value,
					subType: eCmd.value,	// e.g. exec
					cmd: lArgs				// e.g. dir
				};
				var lRes = lWSC.sendToken( lToken, {

				});
				log( lWSC.resultToString( lRes ) );
			}

			function initPage() {
				eLog = jws.$( "sdivLog" );
				eCmd = jws.$( "stxfCmd" );
				eArgs = jws.$( "stxfArgs" );
				eTarget = jws.$( "stxfTarget" );
				eNode = jws.$( "stxfNode" );
				eReqResp = jws.$( "schkReqResp" );
				eTimeout = jws.$( "stxfTimeout" );
				eDuration = jws.$( "stxfDuration" );

				if( window.WebSocket ) {
					lWSC = new jws.jWebSocketJSONClient();
				} else {
					jws.$( "sbtnConnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnDisconnect" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnClear" ).setAttribute( "disabled", "disabled" );
					jws.$( "stxfCmd" ).setAttribute( "disabled", "disabled" );
					jws.$( "sbtnSend" ).setAttribute( "disabled", "disabled" );

					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}
			}

			function exitPage() {
				disconnect();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<!--	remarked temporarily due to chrome 5 browser bug
		<script type="text/javascript">
			var lFrameElem = this.frameElement;
			if( !lFrameElem ) {
				location.replace( "../../index.htm?page=demos/fundamentals/fundamentals.htm" );
			}
		</script>
		-->
		<table class="tblHeader" width="100%" cellspacing="0" cellpadding="0">
			<tr>
				<td class="tdHeader" width="">Common Gateway Interface (CGI)</td>
				<td class="tdHeader" width="1%"><img id="simgStatus" src="../../images/disconnected.png" align="right"/></td>
				<td class="tdHeader" width="1%"><span id="slblClientId">&nbsp;Client&#x2011;Id:&nbsp;-</span></td>
			</tr>
		</table>

		<p>This demo shows how to intercommunicate between various CGI-Clients.</p>
		<div id="sdivLog" class="sdivContainer"
			 style="position:relative; height:300px; overflow:auto;">
		</div>
		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnConnect" type="button" value="Connect" onclick="connect();"
							   >
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnDisconnect" type="button" value="Disconnect" onclick="disconnect();">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();"
							   title="Clears the result and event log above.">
					</td>
					<td class="stdDlg" width="5">Command</td>
					<td class="stdDlg" width="" colspan="3">
						<input class="stxfDlg" id="stxfCmd" type="text" value="Please type your command here!" style="width:100%">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnSend" type="button" value="Send" onclick="sendCommand();">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogin" type="button" value="Login" onclick="login();"
							   title="Authenticates you against the jWebSocket Server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnLogout" type="button" value="Logout" onclick="logout();"
							   title="Logs you out and disconnects from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnPendResp" type="button" value="Pend.Resp." onclick="getPendingResponses();"
							   title="Returns the list of currently pending responses from the jWebSocket server.">
					</td>
					<td class="stdDlg" width="5">Arguments</td>
					<td class="stdDlg" width="" colspan="3">
						<input class="stxfDlg" id="stxfArgs" type="text" value="Please type your arguments here!" style="width:100%">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="" colspan="2">
						Dur <input class="stxfDlg" id="stxfDuration" type="text" value="1000" style="width:38px">
						Tmo <input class="stxfDlg" id="stxfTimeout" type="text" value="2000" style="width:38px">
						RqR <input class="stxfDlg" id="schkReqResp" type="checkbox" checked="checked">
					</td>
					<td class="stdDlg" width="5">
						<input class="sbtnDlg" id="sbtnWait" type="button" value="Wait" onclick="wait();"
							   title="Waits for a certain amount of time.">
					</td>
					<td class="stdDlg" width="5">Target</td>
					<td class="stdDlg" width="70">
						<input class="stxfDlg" id="stxfTarget" type="text" value="Please type the target CGI client-id here!" style="width:100%">
					</td>
					<td class="stdDlg" width="5">Node</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfNode" type="text" value="Please type the target CGI node-id here!" style="width:100%">
					</td>
					<td class="stdDlg" width="" >&nbsp;</td>
				</tr>
			</table>
		</div>

	</body>
</html>
