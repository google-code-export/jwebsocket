<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket Events Demo (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">

		<title>EventsPlugIn features demo</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">
		<!-- load the jWebSocket JavaScript client library -->
		<script type="text/javascript" src="../../res/js/jWebSocket.js"></script>
		<script type="text/javascript" src="../../res/js/jwsEventsPlugIn.js"></script>
		<script type="text/javascript" src="../../res/js/jwsCache.js"></script>
		<script type="text/javascript" src="../../res/js/JcManager.js"></script>
		<script type="text/javascript" src="../../res/js/jWebSocketComet.js"></script>
		<script type="text/javascript" language="JavaScript">

			var eLog = null;

			function log( aString ) {
				eLog.innerHTML += aString + "<br>";
				if( eLog.scrollHeight > eLog.clientHeight ) {
					eLog.scrollTop = eLog.scrollHeight - eLog.clientHeight;
				}
			}

			function clearLog() {
				eLog.innerHTML = "";
				eLog.scrollTop = 0;
			}

			function initPage() {
				eLog = jws.$( "sdivLog" );
				if(jws.browserSupportsWebSockets()){
					jws.myConn = new jws.jWebSocketJSONClient();
					
					//jws.console.isActive = true;
					//jws.console.level = 0;
					
					//jws.myConn.open(jws.JWS_SERVER_URL, {
					jws.myConn.open("ws://localhost:8787/jWebSocket/jWebSocket", {
						OnOpen: function (){
							log(">>> Connected successfully! <br/>")

							//Creating the filter chain
							securityFilter = new jws.SecurityFilter();
							securityFilter.OnNotAuthorized = function(aEvent){
								log("<b><font color='red'>Failure: </font></b><br/>&nbsp;NOT AUTHORIZED to notify an event with id '" + aEvent.type + "'. Logon first!");
							}
			
							cacheFilter = new jws.CacheFilter();
							cacheFilter.cache = new Cache();
							validatorFilter = new jws.ValidatorFilter();
			
							//Creating a event notifier
							notifier = new jws.EventsNotifier();
							notifier.ID = "notifier0";
							notifier.NS = "test";
							notifier.jwsClient = jws.myConn;
							notifier.filterChain = [securityFilter, cacheFilter, validatorFilter];
							notifier.initialize();
			  
							//Creating a plugin generator
							generator = new jws.EventsPlugInGenerator();

							//Generating the auth & test plug-ins.
							auth = generator.generate("auth", notifier, function(){});
							test = generator.generate("test", notifier, function(){
								test.setVisitorCounter = function(e){
									log(">> <b>Receiving a S2C event notification:</b> Visitor's counter: " + e. counter);
								}
								test.plusXY = function(e){
									return e.x + e.y;
								}
								test.transmit = function(e){
									log(">> Executing APDU command to terminal: " + e.terminal + ", " + e.apdu);
									var responseAPDU = JcManager.transmit(e.terminal, e.apdu);
									log("<< Response APDU: " + responseAPDU);
									
									return responseAPDU;
								}
								
								JcManager.addListener({
									OnTerminalReady: function(aTerminal){
										test.terminalReady({
											args: {terminal: aTerminal}
										});
									},
									OnTerminalNotReady: function(aTerminal){
										test.terminalNotReady({
											args: {terminal: aTerminal}
										});
									}
								});
							});
						}
					});
				} else {
					var lMsg = jws.MSG_WS_NOT_SUPPORTED;
					alert( lMsg );
					log( lMsg );
				}

			}

			function logon(){
				auth.logon({
					args: {
						username: jws.$( "stxfUsername" ).value,
						password: jws.$( "spwfPassword" ).value
					},
					OnFailure: function(aResponseEvent){
						log("<b><font color='red'>Failure: </font></b><br/>&nbsp;" + aResponseEvent.msg);
					},
					OnSuccess: function(aResponseEvent){
						log(">> <b>Logon response: </b><br/>&nbsp;Message: " + aResponseEvent.msg + "<br/>&nbsp;Roles: " + aResponseEvent.roles.toString());
					}
				});
			}
			
			function logoff() {
				auth.logoff({
					OnSuccess: function(aResponseEvent){
						log(">> <b>Logoff response: </b><br/>&nbsp;Message: " + aResponseEvent.msg);
					}
				});
			}

			function getAPI(){
				notifier.notify("plugin.getapi", {
					args: {
						plugin_id: jws.$( "stxfPlugInId" ).value
					},
					OnSuccess: function(aResponseEvent){
						log("Elapsed time: " + aResponseEvent.elapsedTime);
						log(">> <b>Get plug-in API response: </b><br/>" + JSON.stringify(aResponseEvent.api));
					},
					OnFailure: function(aResponseEvent){
						log("<b><font color='red'>Failure: </font></b><br/>&nbsp;" + aResponseEvent.msg);
					}
				})
			}

			function getHash(){
				test.getHashCode({
					args: {
						text: jws.$( "stxfText" ).value
					},
					OnSuccess: function(aResponseEvent){
						log(">> <b>Get hash response: </b><br/>&nbsp;" + aResponseEvent.hash_code);
					},
					OnFailure: function(aResponseEvent){
						log("<b><font color='red'>Failure: </font></b><br/>&nbsp;" + aResponseEvent.msg);
					}
				})
			}

			function jcTest(){
				test.jcTest();
			}

			function getInfo(){
				test.getEventsInfo({
					OnSuccess: function(aResponseEvent){
						log(">> <b>Events Info response: </b><br/>&nbsp;Name: " + aResponseEvent.table.name + "<br/>&nbsp;Version: " + aResponseEvent.table.version);
					}
				})
			}

			function s2c(){
				test.s2cNotification();
			}

			function exitPage(){}
			
			
		</script>
	</head>

	<body onload="initPage();" onunload="exitPage();">
		<APPLET id="JcControllerApplet" codebase="./" code="cu/uci/hab/cardplatform/CardPlugIn.class" archive="../../res/java/JcManager.jar" width=0 height=0></APPLET>
		<h1>EventsPlugIn Demo</h1>
		<p>Simple demo to test the EventsPlugIn extension features.</p>
		<!-- <iframe id="sifrtwitterLogin" style="width:100%; height:200px"></iframe> -->

		<div class="sdivContainer">
            <table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" width="100%">
				<tbody><tr class="strDlg">
						<td class="stdDlg" width="5">&nbsp;Username:</td>
						<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfUsername" type="text" value="kyberneees" style="width:150px"></td>
						<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnLogon" type="button" value="Logon" onclick="logon();"></td>
					</tr>
					<tr class="strDlg">
						<td class="stdDlg" width="5">&nbsp;Password:</td>
						<td class="stdDlg" width="5"><input class="spwfDlg" id="spwfPassword" type="password" value="123" style="width:150px"></td>
						<td class="stdDlg" width="5"><input title="The 'USER' role is required. Security enabled in server & client" class="sbtnDlg" id="sbtnLogoff" type="button" value="Logoff" onclick="logoff();"></td>
					</tr>
					<tr class="strDlg">
						<td class="stdDlg" width="5">&nbsp;Provide a plug-in identifier to get it server API:</td>
						<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfPlugInId" type="text" value="test" style="width:150px"></td>
						<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGetAPI" type="button" value="Get plug-in API" onclick="getAPI();"></td>
					</tr>
					<tr class="strDlg">
						<td class="stdDlg" width="5">&nbsp;Provide a text to get the hash code:</td>
						<td class="stdDlg" width="5"><input class="stxfDlg" id="stxfText" type="text" value="Hi World!" style="width:150px"></td>
						<td class="stdDlg" width="5"><input class="sbtnDlg" id="sbtnGetHash" type="button" value="Get text hash" onclick="getHash();"></td>
					</tr>
					<tr class="strDlg">
						<td class="stdDlg" width="5">
							<input class="sbtnDlg" title="S2C event notification to all the connectors" id="sbtnClear" type="button" value="Fire a S2C event notification" onclick="s2c();">
							<input title="Cache aspect enabled in server & client" class="sbtnDlg" id="sbtnClear" type="button" value="Get Events version info" onclick="getInfo();">
							<input title="Test the JavaCard support by sending an arbitrary APDU command to all the client ready terminals" class="sbtnDlg" id="sbtnJcTest" type="button" value="Test JavaCard" onclick="jcTest();">
							<input class="sbtnDlg" id="sbtnClear" type="button" value="Clear Log" onclick="clearLog();">
						</td>
					</tr>
					<tr class="strDlg">
					</tr>
				</tbody></table>
		</div>
		<div id="sdivLog" class="sdivContainer" style="position:relative; height:300px; overflow:auto;">
		</div>



	</body></html>
