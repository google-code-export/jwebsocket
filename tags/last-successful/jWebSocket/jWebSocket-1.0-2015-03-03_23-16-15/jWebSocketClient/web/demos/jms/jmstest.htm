<!DOCTYPE html PUBLIC "-//W3C//DTD html 4.01//EN" "http://www.w3.org/TR/html4/transitional.dtd">
<html>
	<head>
		<meta http-equiv="X-UA-Compatible" content="chrome=1">
		<!-- If Google's chrome frame installed, use it! -->
		<!-- Comment needs to be BELOW this meta tag! -->
		<!--
		//	****************************************************************************
		//	jWebSocket JMS Test (Community Edition, CE)
		//	****************************************************************************
		//	Copyright 2010-2014 Innotrade GmbH (jWebSocket.org)
		//  Alexander Schulze, Germany (NRW)
		//
		//	Licensed under the Apache License, Version 2.0 (the "License");
		//	you may not use this file except in compliance with the License.
		//	You may obtain a copy of the License at
		//
		//	http://www.apache.org/licenses/LICENSE-2.0
		//
		//	Unless required by applicable law or agreed to in writing, software
		//	distributed under the License is distributed on an "AS IS" BASIS,
		//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		//	See the License for the specific language governing permissions and
		//	limitations under the License.
		//	****************************************************************************
		-->
		<meta http-equiv="Content-Language" content="en">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>jWebSocket JMS Test</title>
		<link rel="stylesheet" type="text/css" href="../../res/css/jwebsocket.css">

		<script src="../../res/js/jWebSocket.js" type="text/javascript"></script>
		<script src="../../res/js/jwsDemoPlugIn.js" type="text/javascript"></script>
		<script src="../../res/js/jwsJMSPlugIn.js" type="text/javascript"></script>

		<script src="../../lib/crypto-js/aes.js" type="text/javascript"></script>


		<script type="text/javascript" language="JavaScript">

			var eArgs, eNS, eType, eGatewayId, eTargetId, eAccessToken;

			function sendJMSRequest() {
				log("Sending JMS request...");
				lWSC.forwardJSON(
						// "hqdvptas134", 
						// "com.ptc.windchill",
						// "createBOM", 
						eTargetId.value, // target
						"org.jwebsocket.svcep.demo", //	aNS, 
						"sso1", //	aType, 
						{
							accessToken: "invalidToken"
						}, //	aArgs, 
				"{}", //	aJSON payload, 
						{
							OnSuccess: function(aToken) {
								log("Success: " + JSON.stringify(aToken));
							},
							OnFailure: function(aToken) {
								log("Failure: " + JSON.stringify(aToken));
							}
						});
			}

			function jmsPing() {
				log("Sending 'Ping'...");
				if (lWSC.isConnected()) {
					lWSC.jmsPing(eTargetId.value, {
						OnSuccess: function(aToken) {
							log("Ping success: " + aToken.sourceId);
						},
						OnFailure: function(aToken) {
							log("Ping failure: " + aToken.msg);
						},
						OnTimeout: function() {
							log("Ping timeout!");
						},
						timeout: 2000
					});
				} else {
					log("Not connected.");
				}
			}

			function jmsIdentify() {
				log("Sending 'Identify'...");
				lWSC.jmsIdentify(eTargetId.value, {
					OnSuccess: function(aToken) {
						log("Identify success: " + aToken.sourceId + ", " + aToken.canonicalHostname);
					},
					OnFailure: function(aToken) {
						log("Identify failure: " + aToken.msg);
					},
					OnTimeout: function() {
						log("Identify timeout!");
					},
					timeout: 2000
				});
			}
			
			function jmsBrokerConnected() {
				log("Sending 'isBrokerConnected' to server...");
				lWSC.jmsIsBrokerConnected({
					OnSuccess: function(aToken) {
						log(" IsBrokerConnected: " + aToken.isConnected);
					},
					OnFailure: function(aToken) {
						log("IsBrokerConnected: " + aToken.msg);
					},
					OnTimeout: function() {
						log("IsBrokerConnected timeout!");
					},
					timeout: 2000
				});
			}

			function jmsEcho() {
				log("Sending 'Echo' to '" + eTargetId.value + "'...");
				lWSC.jmsEcho(eTargetId.value, "This is my payload", {
					OnSuccess: function(aToken) {
						log("Echo success: " + aToken.sourceId);
					},
					OnFailure: function(aToken) {
						log("Echo failure: " + aToken.msg);
					},
					OnTimeout: function() {
						log("Echo timeout!");
					},
					timeout: 2000
				});
			}

			function jmsHelloWorld() {
				log("Sending 'Hello World' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"helloWorld",
						{}, //
						"", // JSON
						{OnSuccess: function(aToken) {
								log("Hello World success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("Hello World failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("Hello World timeout!");
							},
							timeout: 2000
						}
				);
			}

			function jmsSSOGetUser() {
				log("Sending 'SSO GetUser' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"getUser",
						{accessToken: eAccessToken.value
						},
				"", // JSON
						{OnSuccess: function(aToken) {
								log("Hello success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("Echo failure: " + aToken.msg);
							}
						}
				);
			}

			function jmsTestAuth() {
				log("Sending 'Test Auth' to '" + eTargetId.value + "'...");
				var lAT = eAccessToken.value;
				var lAuthData;
				if (lAT) {
					lAuthData = {
						accessToken: lAT,
						username: eUsername.value

					};
				} else {
					lAuthData = {
						username: eUsername.value,
						password: ePassword.value
					};
				}

				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testAuthToken",
						lAuthData,
						"", // JSON
						{OnSuccess: function(aToken) {
								log("Auth success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("Auth failure: " + aToken.msg);
							}
						}
				);
			}

			function jmsTestSSOAuth() {
				log("Sending 'Test SSO Auth' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testOAuth",
						{accessToken: eAccessToken.value
						},
				"", // JSON
						{OnSuccess: function(aToken) {
								log("SSO Auth success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("SSO Auth failure: " + aToken.msg);
							},
							OnTimeout: function(aToken) {
								log("SSO Auth timeout");
							},
							timeout: 3000
						}
				);
			}

			function jmsTestLDAPAuth() {
				log("Sending 'Test LDAP Auth' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testLDAP",
						{username: eUsername.value,
							password: ePassword.value
						},
				"", // JSON
						{OnSuccess: function(aToken) {
								log("LDAP Auth success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("LDAP Auth failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("LDAP timeout!");
							},
							timeout: 3000
						}
				);
			}

			function jmsTestProgress() {
				log("Sending 'Test Progress' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testProgress",
						{}, //
						"", // JSON
						{OnSuccess: function(aToken) {
								log("Progress success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("Progress failure: " + aToken.msg);
							}
						}
				);
			}

			function jmsTestCaughtException() {
				log("Sending 'TestCaughtException' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testCaughtException",
						{}, //
						"", // JSON
						{OnSuccess: function(aToken) {
								log("TestCaughtException success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("TestCaughtException failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("TestCaughtException timeout!");
							},
							timeout: 2000
						}
				);
			}

			function jmsTestUncaughtException() {
				log("Sending 'TestUncaughtException' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testUncaughtException",
						{}, //
						"", // JSON
						{OnSuccess: function(aToken) {
								log("TestUncaughtException success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("TestUncaughtException failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("TestUncaughtException timeout!");
							},
							timeout: 2000
						}
				);
			}

			function jmsTestDecryptionTarget() {
				log("Sending 'decryptionTest' to '" + eTargetId.value + "'...");
				lWSC.forwardJSON(
						eTargetId.value,
						"org.jwebsocket.jms.demo",
						"testUncaughtException",
						{}, //
						"", // JSON
						{OnSuccess: function(aToken) {
								log("TestUncaughtException success: " + aToken.sourceId);
							},
							OnFailure: function(aToken) {
								log("TestUncaughtException failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("TestUncaughtException timeout!");
							},
							timeout: 2000
						}
				);
			}

			function jmsTestDecryptionServer() {
				log("Sending 'decryptDemo' to server...");
				// var encrypted = CryptoJS.AES.encrypt("Message", "Secret Passphrase");
				// var decrypted = CryptoJS.AES.decrypt(encrypted, "Secret Passphrase");
				var lToken = {
					ns: "org.jwebsocket.plugins.jmsdemo",
					type: "decryptDemo",
					message: CryptoJS.AES.encrypt("This is a message to be decrypted", "PutYourPassPhraseHere").toString()};
				lWSC.sendToken(
						lToken,
						{OnSuccess: function(aToken) {
								log("decryptDemo (server) success: " + JSON.stringify(aToken));
							},
							OnFailure: function(aToken) {
								log("decryptDemo (server) failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("decryptDemo (server) timeout!");
							},
							timeout: 2000
						}
				);
			}

			function jmsTestEchoClient() {
				log("Sending 'Test Client' to '" + eTargetId.value + "'...");

				var lToken = {
					ns: "org.jwebsocket.plugins.jms",
					type: "test",
					sourceId: lWSC.getId(),
					originId: lWSC.getId()
				};

				lWSC.sendToken(
						lToken,
						{OnSuccess: function(aToken) {
								log("echo (server) success: " + JSON.stringify(aToken));
							},
							OnFailure: function(aToken) {
								log("echo (server) failure: " + aToken.msg);
							},
							OnTimeout: function() {
								log("echo (server) timeout!");
							},
							timeout: 2000
						}
				);
			}

			function initPage() {
				eArgs = jws.$("stxfArgs");
				eNS = jws.$("stxfNS");
				eType = jws.$("stxfType");
				eGatewayId = jws.$("stxfGatewayId");
				eTargetId = jws.$("stxfTargetId");
				eAccessToken = jws.$("stxfAccessToken");

				lWSC.setJMSCallbacks({
					OnPing: function(aToken) {
						log("<b>Pong from: " + aToken.sourceId + "</b>");
					},
					OnIdentify: function(aToken) {
						log("<b>Identity from: " + aToken.sourceId + ", " + aToken.hostname + ", " + aToken.ip + "</b>");
					},
					OnBrokerTransportInterupted: function(aToken) {
						log("<b>JMS Broker Transport Interrupted!</b>");
					},
					OnBrokerTransportResumed: function(aToken) {
						log("<b>JMS Broker Transport Resumed!</b>");
					},
					OnBrokerTransportException: function(aToken) {
						log("<b>Broker Transport Interrupted! Message: " + aToken.message + "</b>");
					}
				});

				jws.console.setActive(true);
				jws.console.setLevel(jws.console.DEBUG);
			}

			function exitPage() {
				// processExitPage();
			}

		</script>
	</head>

	<body
		onload="initPage();"
		onunload="exitPage();"
		>
		<script type="text/javascript">
			jws.DemoPlugIn.buildDemoPage({
				title: "External Process",
				header: "jWebSocket JMS Test",
				description: "Here you can test certain features of the jWebSocket JavaScript JMS client."
			});
			processInitPage();
		</script>


		<div class="sdivContainer">
			<table class="stlbDlg" border="0" cellpadding="3" cellspacing="0" >
				<tr class="strDlg">
					<td class="stdDlg" width="5">Gateway&#8209;Id
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfGatewayId" type="text" value="org.jwebsocket.jms.gateway" style="width:99%"
							   title="The ID of the JMS gateway.">
					</td>
					<td class="stdDlg" width="5">Target&#8209;Id
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfTargetId" type="text" value="JMSServer" style="width:99%"
							   title="The endpoint id of the JMS target.">
					</td>
				</tr>
				<tr class="strDlg">
					<td class="stdDlg" width="5">Namespace
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfNS" type="text" value="org.jwebsocket.jms.gateway" style="width:99%"
							   title="The namespace of the reuqest to the server.">
					</td>
					<td class="stdDlg" width="5">Type
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfSQL" type="text" value="ping" style="width:99%"
							   title="The type of the command to the JMS server.">
					</td>
					<td class="stdDlg" width="5">AccessToken
					</td>
					<td class="stdDlg" width="">
						<input class="stxfDlg" id="stxfAccessToken" type="text" value="-" style="width:99%"
							   title="Type here the value of the access token.">
					</td>
				</tr>
				<tr class="strDlg">
					<td colspan="6" width="">
						<input class="sbtnDlg" id="sbtnPing" type="button" value="Ping" onclick="jmsPing();"
							   title="Pings a certain JMS endpoint.">
						<input class="sbtnDlg" id="sbtnIdentify" type="button" value="Identify" onclick="jmsIdentify();"
							   title="Requests a certain endpoint to identify.">
						<input class="sbtnDlg" id="sbtnEcho" type="button" value="Echo" onclick="jmsEcho();"
							   title="Requests an echo from certain endpoint.">
						<input class="sbtnDlg" id="sbtnHelloWorld" type="button" value="Hello World" onclick="jmsHelloWorld();"
							   title="Requests an Hello World from certain endpoint.">
						<input class="sbtnDlg" id="sbtnSSOGetUser" type="button" value="SSO GetUser" onclick="jmsSSOGetUser();"
							   title="Requests an username from a given OAuth access token.">
						<input class="sbtnDlg" id="sbtnSendRequest" type="button" value="JMS Request" onclick="sendJMSRequest();"
							   title="Send a request using the access token to the JMS demo server.">
						<input class="sbtnDlg" id="sbtnEchoClient" type="button" value="Echo Client" onclick="jmsTestEchoClient();"
							   title="Tries to get an Echo from the internal JMS client of the jWebSocket gateway.">
						<input class="sbtnDlg" id="sbtnBrokerConnected" type="button" value="BrokerConnected" onclick="jmsBrokerConnected();"
							   title="Checks if the server is connected to the JMS queue/topic.">
					</td>
				</tr>
				<tr class="strDlg">
					<td colspan="6" width="">
						<input class="sbtnDlg" id="sbtnAutoAuth" type="button" value="Auto Auth" onclick="jmsTestAuth();"
							   title="Tests the automatic endpoint authentication.">
						<input class="sbtnDlg" id="sbtnSSOAuth" type="button" value="SSO Auth" onclick="jmsTestSSOAuth();"
							   title="Tests the SSO/OAuth endpoint authentication.">
						<input class="sbtnDlg" id="sbtnLDAPAuth" type="button" value="LDAP Auth" onclick="jmsTestLDAPAuth();"
							   title="Tests the LDAP endpoint authentication.">
						<input class="sbtnDlg" id="sbtnProgress" type="button" value="Progress" onclick="jmsTestProgress();"
							   title="Tests the server side progress events.">

						<input class="sbtnDlg" id="sbtnTestCaughtException" type="button" value="Caught Ex." onclick="jmsTestCaughtException();"
							   title="Tests the server side caught exception processing.">
						<input class="sbtnDlg" id="sbtnTestUncaughtException" type="button" value="Uncaught Ex." onclick="jmsTestUncaughtException();"
							   title="Tests the server side uncaught exception processing.">
						<input class="sbtnDlg" id="sbtnDecrpytServer" type="button" value="Descrypt Server" onclick="jmsTestDecryptionServer();"
							   title="Tests the message decryption on the jWebSocket server.">
					</td>
				</tr>
			</table>
		</div>

	</body>
</html>
